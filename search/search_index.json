{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The Iden3comm protocol defines the rules for communication between agents, wallets. It is built on the DIDComm messaging protocol.</p> <p>The Iden3comm protocol specification introduces protocols such as credential, revocation, auth, etc. Currently, Iden3comm does not support any existing DIDComm protocols, such as Discovery Features or Trust Ping. Therefore, there is no need to implement those specific DIDComm protocols. However, if the standard protocols/methods provided are insufficient, it is possible to extend the specification with custom protocols and methods to meet your requirements.</p> <p>Since the Iden3comm protocol is built on the DIDComm protocol, we must adhere to all the rules of the DIDComm protocol.</p> <p>The specification itself is not tied to any specific technology. Similar to the DIDComm Messaging Specification, it does not impose any limitations on the transport layers used, allowing for various technologies to be employed in implementing it.</p> <p>More about the architecture of message handling: Asynchronous and synchronous:</p> <p>On top of this foundation, it is possible to build elegant, synchronous request-response interactions. All of us have interacted with a friend who\u2019s emailing or texting us in near-realtime. However, interoperability begins with a least-common-denominator assumption that\u2019s simpler. </p> <p>DIDcomm requires strict versioning. Iden3comm supports this specification: https://semver.org/</p> Name Version Description Credentials 1.0 This protocol is aimed at performing actions with a credential. Fetching a credential, issuing a credential, and more. Auth 1.0 This protocol is used to exchange authorization requests and responses between communicators Contract invoke 1.0 Contains all information for calling a smart contract Proof 1.0 This protocol aimed to exchange proof between communicators Revocation 1.0 Revocation protocol for getting existing non-existent revocation proof <p>All of these protocols share the same high-level message structure but have different message bodies that depend on the specific protocol being used. The details of this high-level message structure are outlined in the DIDComm specification.</p> <p>Example of common message:</p> <p><pre><code>{\n    \"id\": \"0297b976-bb81-458b-982b-67edea81d439\",\n    \"typ\": \"application/iden3comm-zkp-json\",\n    \"type\": \"https://iden3-communication.io/authorization/1.0/request\",\n    \"thid\": \"b05334c8-7a4e-4dfa-bbe8-7b0259efad63\",\n    \"body\": &lt;depend_on_protocol&gt;,\n    \"from\": \"did:polygonid:polygon:mumbai:2qJ689kpoJxcSzB5sAFJtPsSBSrHF5dq722BHMqURL\",\n    \"to\": \"did:polygonid:polygon:mumbai:2qK2Rwf2zqzzhqVLqTWXetGUbs1Sc79woomP5cDLBE\"\n}\n</code></pre> The field <code>typ</code> can be one of the following three types:     1. <code>application/iden3comm-signed-json</code> for a signed message;     2. <code>application/iden3comm-plain-json</code> for plain message;     3. <code>application/iden3comm-encrypted-json</code> for encrypted message.     4. <code>application/iden3-zkp-json</code> for JSON Web Zeroknowledge message;</p>"},{"location":"#_1","title":"<p>Iden3comm on GitHub</p>","text":""},{"location":"authorization/overview/","title":"Overview","text":"<p>This protocol enables users to initiate an authorization request to get privileges on a resource. After the authorization request, the user should get an authorization response for understanding the success or fail the authorization flow.</p>"},{"location":"authorization/1.0/request/","title":"Request","text":"<p>type: <code>/authorization/1.0/request</code></p> <p>A resource initiates a request to a user. The user is required to generate a zero-knowledge proof and include this proof within the authorization response in order to log in to the resource.</p> <pre><code>{\n    \"callbackUrl\": \"&lt;url_for_send_user`s_authorization_response&gt;\",\n    \"reason\": \"&lt;reason_for_the_request&gt;\",\n    \"message\": \"&lt;authorization_request_payload&gt;\",\n    \"did_doc\": \"&lt;did_doc&gt;\",\n    \"scope\": \"[&lt;list_of_requested_proofs_from_user&gt;]\",\n    \"accept\":  [\n      \"iden3comm/v1;env=application/iden3-zkp-json;circuitId=authV2,authV3;alg=groth16\",\n      \"iden3comm/v1;env=application/iden3comm-signed-json;alg=ES256K-R\",\n      \"iden3comm/v1;env=application/iden3-zkp-json;circuitId=authV4;alg=plonk\"\n    ]\n}\n</code></pre> Field Description Type Required callbackUrl User should use this url for send authorization response string \u2705 reason Reason for the request string \u274c message Message payload string \u274c did_doc Resource did doc JSON \u274c accept Specifies profile that creator of the requests accepts as a response. More here. string[] \u274c scope.id Unique request id uint64 \u2705 scope.circuitId Information that circuit should use user for generating zk proof string \u2705 scope.optional indicates that proof is optional boolean \u274c scope.query.skipClaimRevocationCheck Indicates if revocation check can be omitted during zkp generation boolean \u274c scope.query.groupId group id to create the same link nonce for linked proofs and use the same query number \u274c scope.query.proofType Proof type that must persist in the W3C credential for zkp proof string \u274c scope.query Information about what information the user must prove with ZKPproof map \u2705 scope.query.allowedIssuers Credentials only from these issuers will be used for zero-knowledge proof generation array \u2705 scope.query.type Credential type string \u2705 scope.query.context JSON LD url of credential type context string \u2705 scope.query.credentialSubject Credential subject of W3C credential map \u2705 scope.query.credentialSubject.{field} Credential subject field of W3C credential map \u2705 scope.query.credentialSubject.{field}.{operator} Feild operator for zkp and comparison value object \u2705 scope.params circuit specific params map) \u274c scope.params.nullifierSessionId nullifier session id to create a nullifier  for V3 circuit string (bigInt) \u274c <ul> <li> <p>Example of authorization request:</p> <pre><code>{\n  \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/authorization/1.0/request\",\n  \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n  \"body\": {\n    \"callbackUrl\": \"https://test.com/callback\",\n    \"reason\": \"age verification\",\n    \"message\": \"test message\",\n    \"scope\": [\n      {\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQuerySigV2\",\n        \"query\": {\n          \"allowedIssuers\": [\"*\"],\n          \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v101.json-ld\",\n          \"type\": \"KYCEmployee\",\n          \"credentialSubject\": {\n            \"hireDate\": {\n              \"$eq\": \"1996-04-24\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre> </li> <li> <p>Example of authorization request with multiple proof queries:</p> <p><pre><code>{\n  \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/authorization/1.0/request\",\n  \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n  \"body\": {\n    \"callbackUrl\": \"https://test.com/callback\",\n    \"reason\": \"age verification\",\n    \"message\": \"test message\",\n    \"scope\": [\n      {\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQuerySigV2\",\n        \"query\": {\n          \"allowedIssuers\": [\"*\"],\n          \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v101.json-ld\",\n          \"type\": \"KYCEmployee\",\n          \"credentialSubject\": {\n            \"position\": {\n              \"$eq\": \"developer\"\n            }\n          }\n        }\n      },\n      {\n        \"id\": 2,\n        \"circuitId\": \"credentialAtomicQuerySigV2\",\n        \"query\": {\n          \"allowedIssuers\": [\"*\"],\n          \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v101.json-ld\",\n          \"type\": \"KYCCountryOfResidenceCredential\",\n          \"credentialSubject\": {\n            \"countryCode\": {\n              \"$in\": [980, 340]\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre> - Example of authorization request without proof queries (basic auth:</p> <pre><code>{\n  \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/authorization/1.0/request\",\n  \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n  \"body\": {\n    \"callbackUrl\": \"https://test.com/callback\",\n    \"reason\": \"age verification\",\n    \"message\": \"test message\",\n    \"scope\": []\n  }\n}\n</code></pre> </li> <li> <p>Example of request to V3 atomic circuit with / without nullifier and linked proofs</p> <pre><code>{\n    \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"type\": \"https://iden3-communication.io/authorization/1.0/request\",\n    \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n    \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n    \"body\": {\n      \"callbackUrl\": \"https://test.com/callback\",\n      \"reason\": \"age verification\",\n      \"message\": \"test message\",\n      \"scope\": [\n        {\n          \"id\": 1,\n          \"circuitId\": \"credentialAtomicQueryV3\",\n          \"params\": {\n            \"nullifierSessionId\" : \"123443290439234342342423423423423\"\n          },\n          \"query\": {\n            \"groupId\": 1,\n            \"proofType\": \"BJJSignature\",\n            \"allowedIssuers\": [\"*\"],\n            \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v101.json-ld\",\n            \"type\": \"KYCEmployee\",\n            \"credentialSubject\": {\n              \"position\": {\n                \"$eq\": \"developer\"\n              }\n            }\n          }\n        },\n        {\n          \"id\": 2,\n          \"circuitId\": \"smallCircuit\",\n          \"query\": {\n              \"groupId\" : 1,\n              \"credentialSubject\": {\n                  \"bithdate\": {\n                    \"$lt\": \"20010101\"\n                }\n            }\n          }\n        },\n        {\n          \"id\": 3,\n          \"circuitId\": \"credentialAtomicQueryV3\",\n          \"query\": {\n            \"allowedIssuers\": [\"*\"],\n            \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v101.json-ld\",\n            \"type\": \"KYCCountryOfResidenceCredential\",\n            \"credentialSubject\": {\n              \"countryCode\": {\n                \"$in\": [980, 340]\n              }\n            }\n          }\n        }\n      ]\n    }\n}\n</code></pre> </li> <li> <p>Example of authorization request with accept header:</p> <pre><code>{\n  \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/authorization/1.0/request\",\n  \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"from\": \"did:polygonid:polygon:amoy:2qaPod1Qxo9UKTzR7K3Yo63gNRFHBm98bh1k1SEY6x\",\n  \"body\": {\n    \"callbackUrl\": \"https://test.com/callback\",\n    \"reason\": \"age verification\",\n    \"message\": \"test message\",\n    \"accept\": [\n       \"iden3comm/v1;env=application/iden3-zkp-json;circuitId=authV2;alg=groth16\",\n       \"iden3comm/v1;env=application/iden3comm-signed-json;alg=ES256K-R\"\n    ],\n    \"scope\": [\n      {\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQuerySigV2\",\n        \"query\": {\n          \"allowedIssuers\": [\"*\"],\n          \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v101.json-ld\",\n          \"type\": \"KYCEmployee\",\n          \"credentialSubject\": {\n            \"hireDate\": {\n              \"$eq\": \"1996-04-24\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre> </li> </ul>"},{"location":"authorization/1.0/response/","title":"Response","text":"<p>type: <code>/authorization/1.0/response</code></p> <p>Authorization response to verification proof in a resource.</p> <pre><code>{\n    \"did_doc\": \"&lt;user_did_document&gt;\",\n    \"message\": \"&lt;authorization_request_payload&gt;\",\n    \"scope\": [\"&lt;list_of_proofs&gt;\"]\n}\n</code></pre> Field Description Type Required did_doc User`s DID documen JSON \u274c message Payload for an authorization request string \u274c scope List of objects with zkproo f and public inputs *list of objects \u2705 scope.id Unique id to present unique authorization request uint32 \u2705 scope.circuitId Information that circuit was used for generating zk proof string \u2705 scope.vp Information that user wants to disclosure JSON \u274c scope[i].proof proof JSON \u2705 scope[i].public_signals A list of public inputs was utilized in the generation of the Zero-Knowledge Proof (ZKProof). list of strings \u2705 <p>The <code>scope</code> field contains a list of zero-knowledge proofs and public inputs for authorization on a resource. More about scope contnet: https://github.com/iden3/go-circuits</p> <ul> <li> <p>Example of authorization response:</p> <pre><code>{\n  \"id\": \"7f38a193-0918-4a48-9fac-36adfdb8b542\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/authorization/1.0/response\",\n  \"thid\": \"7f38a193-0918-4a48-9fac-36adfdb8b542\",\n  \"body\": {\n    \"message\": \"test\",\n      \"did_doc\": {},\n    \"scope\": [\n      {\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQueryMTP\",\n        \"proof\": {\n          \"pi_a\": [\n            \"9742806134969392226546322490560630802447930806537100408086160321763928272376\",\n            \"21455791203277003434494375277451189817937636213176444019767120099596514163982\",\n            \"1\"\n          ],\n          \"pi_b\": [\n            [\n              \"10380825203862480352812509276126714433521593951138343399902602814224203230644\",\n              \"3258713202006941217475014546591342349864153477480289203741647764981122849969\"\n            ],\n            [\n              \"1822645146824926970539316997069683858010941097218414131904374790154170166572\",\n              \"10353710770765315368364178270577963995559055291780726291909607243297495512681\"\n            ],\n            [\n              \"1\",\n              \"0\"\n            ]\n          ],\n          \"pi_c\": [\n            \"9484567403290042082168690530225028055268796074940883562365588128103915644358\",\n            \"6661326208907807355087503512595101570698136414120018064634575604679380099060\",\n            \"1\"\n          ],\n          \"protocol\": \"groth16\"\n        },\n        \"pub_signals\": [\n          \"379949150130214723420589610911161895495647789006649785264738141299135414272\",\n          \"18656147546666944484453899241916469544090258810192803949522794490493271005313\",\n          \"1\",\n          \"17339270624307006522829587570402128825147845744601780689258033623056405933706\",\n          \"26599707002460144379092755370384635496563807452878989192352627271768342528\",\n          \"17339270624307006522829587570402128825147845744601780689258033623056405933706\",\n          \"1642074362\",\n          \"106590880073303418818490710639556704462\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\"\n        ]\n      }\n    ]\n  },\n  \"from\": \"did:polygonid:polygon:mumbai:2qJG6RYgN1u6v7JAYSdfixSwktnZ7hMzd4t21SCdNu\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\"\n}\n</code></pre> </li> </ul>"},{"location":"credentials/overview/","title":"Overview","text":"<p>This protocol enables users to initiate a claim request from an issuer. Additionally, issuers can utilize this protocol to proactively send credential offers to users, even without the user explicitly requesting them.</p>"},{"location":"credentials/0.1/encrypted-issuance-response/","title":"Encrypted issuance response","text":"<p>type: <code>/credentials/0.1/encrypted-issuance-response</code></p> <p>The issuer uses this type of response if it wants to return the encrypted credentials to the user.</p> <pre><code>{\n  \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\",\n  \"data\": {\n    \"protected\": \"eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIiwia2lkIjoiZGlkOmV4YW1wbGU6YWxpY2Uja2V5LTEifQ\",\n    \"header\": {\n      \"alg\": \"RSA-OAEP-256\",\n      \"kid\": \"did:example:alice#key-1\"\n    },\n    \"encrypted_key\": \"qMBHtC4ZBhYznjVIK_lov42utXT_jWs7O33bC_AqODjltL76vVNhfn4rT2QNw9xbMMZEL0s7TABX3E9fRTBXr_qGbhVlgVs7fuoIms3T-uausP-6_PyElMWWPQ84586XXL2CoDOgAeNAaN7MnV37QlvlvPRrB_A2BJxyNdLEbq-Z_NWOz4MJBcOZNzLRRu1UPiBYOeyBXCwLyC4f7y3F73m2xHBQq523OnhaaT_9vZMeVpdBUJM8utfU8WkFdK94JvD8WO7TljWlJD9TN3OQY_CvfXEfSejqElPcN6ydJA8GaPuwNg2cEBKau8GnDs3wYUvyszGXI2t3QQenMbNL5Q\",\n    \"iv\": \"pXUjHplaJJ1BNeLp\",\n    \"ciphertext\": \"qPdeTqQ_Fl1FyLiqBLu4jezxTyfiV6IyZwQBYXc1sRZc3O4EvKFYfYi6nEbtzh_xU1gJLFFv4zTk08rQpYwvuDcoeQyUWkilVwTZPempytSdpisPE92-rDi-28kn6jnYBbbKRUjjJqgh4uGZtZPhve7zOgtP3Yk75LnqzaWCAl2mpbkYWXOXiJ5EmQR2T-17vO3GYcfa1SwupVoFJFooCuARJVylK_rxcayjKB_Ql8El9xkmO-Ib8Vtc25WbSotLG6ot82hbsM6ArkL4QMBt2FF79k--VSf5AloITxZOlEcWVamv1wNHMoChbwpV8xwpQTAz2-wslk6Xgse271xBir_VV6Z8yRUg7fCw-X5nqFUr8xjS0NYJCCaESyeqsVyBMQu8a5AqIXL1ceG9umqeqjaS7_f3h1pLtd2NrXfmnotH9cNQhT6OHcf1aA8OuK1JQx0qpFqqKZB_nnS5r6Zi-lgSV0EZKaM_QDpt-af8T6iTHTskXuVgs5PTNQkpK5xKRWYZ_x4GTf3TckfF5nweE2GGsgQkQl1T2gB0_dKqnx04DHrpzNC6JghvKIRgm7l0MatLyLz9BACwBhAL3uf9nkFg8-fZ7g_2x8LrkPWbLGdIphP5n-dA99gZL6q16u0lEGeYztv1Xe5t70pjKUYrOs3KDtnppRknMsOfOw6e_qf09XAbUHNMfEtjeSplOaT8VCG2ikooAeDDURa91LOgIhdjsNmMfww13IytB0TnXSo7YBo1u7Of04cJ0WEUZnw2He3nrvcV9ORqphA7AMKSTLnRa8LrpUCB-0v7nMGlJXKDtFCxuq7FOTg6FsWwfnWyB5ukNKmgg2R_6whZF70qvhkwo0ja5wq7Hxg5aweZjW9-dhbdD9BBtHlVot968Q_FcKOpk6UPkVa6vRNPOo7TkQphsd2v1s_qfjwINEAsr8wLlqLx00p4NLvS2On1QUopi1IDFA31L_R54APXdjVHwrys8UpoPR2NpvBOY3gkGlBCXHjqlxcmvngqsAgs-RHtmzH7t190x0JdzpCnT4qqnDybU1OSHCZIqKfV09W82xjb2HR_RC3VKj-h9kqrhDzyIrPmUIDHtMrB0g77AS1WN6bgSvMetPi-fIcsEJSOex-FJUU00NNLXyZCWOOcjpOjI6kTe-YMN4cCC1UJ358h03OPnTHWXfhRMALI9t7-t5TPFjtb240FPJOISpBTNRn5QgoJ9ta5tOVy9DfUt_f9kmFteRhatyzCmZUKrW3m2xTuzU6eBxHgkvBz\",\n    \"tag\": \"3eXoXKxOB4rGZTNVb3i3Ew\"\n  },\n  \"id\": \"5b39cfe6-a9cd-11f0-9a17-3ec1cb51743a\",\n  \"proof\": [\n    {\n      \"type\": \"BJJSignature2021\",\n      \"issuerData\": {\n        \"id\": \"did:polygonid:polygon:amoy:2qXnMYUfndFcM4NVVjbCrzjfMj9eoDYw6Y7zXtHaHR\",\n        \"state\": {\n          \"claimsTreeRoot\": \"b0ddc3a021388c7547ea62567b105f0b01cfd2f2af0a4b9e3f67eae563796e2d\",\n          \"value\": \"1075a2a76ea979363f6ae1b96b90a63eed313495c42462e43c12c0fc499d0a11\"\n        },\n        \"authCoreClaim\": \"cca3371a6cb1b715004407e325bd993c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ac5b230672ab2b8406ca0d10eb7936d23195c9ebbc8e286a262d58d3cd06400ec248d78999b7b38007964a3bd2b46255ec41e686141c83d455db2eae5edc0140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"mtp\": {\n          \"existence\": true,\n          \"siblings\": []\n        },\n        \"credentialStatus\": {\n          \"id\": \"https://issuernode-mumbai-protocol.polygonid.me/v2/agent\",\n          \"revocationNonce\": 0,\n          \"type\": \"Iden3commRevocationStatusV1.0\"\n        }\n      },\n      \"coreClaim\": \"c9b2370371b7fa8b3dab2a5ba81b68382a000000000000000000000000000000021204bfd2d528a8a70e276c14fd146df9c133be5dd3a9524db1022a2b530c0010b59b95eb5fa55505513b5b7ea79d46ff3c1cb1c8b50fe22171177bceac660b00000000000000000000000000000000000000000000000000000000000000003e6ae6d00000000046ef72710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"signature\": \"7117705347cbcf8f32d4147cfc0f4c916303c8c321acbf3173b62b30076ea82d46a96e591680f4c019c897c9c9cc91919dd8973d038e10366bd462290c32df00\"\n    }\n  ],\n  \"type\": \"KYCAgeCredential\"\n}\n</code></pre> Field Description Type Required id ID of VC string \u2705 context Context of credential string \u2705 type Type of credential string \u2705 data JWE token in JSON format object \u2705 proof List of proofs that the VC has *list of objects \u2705 <p>The content of <code>credentials.data</code> is an encrypted W3Credential without the proof part.</p> <ul> <li>Example of credential issuance:</li> </ul> <pre><code>{\n  \"id\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n  \"thid\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/encrypted-issuance-response\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qCgaRG3nfDsK7X2x9Lnh4DuAQtrGNSRZvHzcDQKA3\",\n  \"from\": \"did:polygonid:polygon:amoy:2qXnMYUfndFcM4NVVjbCrzjfMj9eoDYw6Y7zXtHaHR\",\n  \"body\": {\n    \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\",\n    \"data\": {\n      \"protected\": \"eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIiwia2lkIjoiZGlkOmV4YW1wbGU6YWxpY2Uja2V5LTEifQ\",\n      \"header\": {\n        \"alg\": \"RSA-OAEP-256\",\n        \"kid\": \"did:example:alice#key-1\"\n      },\n      \"encrypted_key\": \"qMBHtC4ZBhYznjVIK_lov42utXT_jWs7O33bC_AqODjltL76vVNhfn4rT2QNw9xbMMZEL0s7TABX3E9fRTBXr_qGbhVlgVs7fuoIms3T-uausP-6_PyElMWWPQ84586XXL2CoDOgAeNAaN7MnV37QlvlvPRrB_A2BJxyNdLEbq-Z_NWOz4MJBcOZNzLRRu1UPiBYOeyBXCwLyC4f7y3F73m2xHBQq523OnhaaT_9vZMeVpdBUJM8utfU8WkFdK94JvD8WO7TljWlJD9TN3OQY_CvfXEfSejqElPcN6ydJA8GaPuwNg2cEBKau8GnDs3wYUvyszGXI2t3QQenMbNL5Q\",\n      \"iv\": \"pXUjHplaJJ1BNeLp\",\n      \"ciphertext\": \"qPdeTqQ_Fl1FyLiqBLu4jezxTyfiV6IyZwQBYXc1sRZc3O4EvKFYfYi6nEbtzh_xU1gJLFFv4zTk08rQpYwvuDcoeQyUWkilVwTZPempytSdpisPE92-rDi-28kn6jnYBbbKRUjjJqgh4uGZtZPhve7zOgtP3Yk75LnqzaWCAl2mpbkYWXOXiJ5EmQR2T-17vO3GYcfa1SwupVoFJFooCuARJVylK_rxcayjKB_Ql8El9xkmO-Ib8Vtc25WbSotLG6ot82hbsM6ArkL4QMBt2FF79k--VSf5AloITxZOlEcWVamv1wNHMoChbwpV8xwpQTAz2-wslk6Xgse271xBir_VV6Z8yRUg7fCw-X5nqFUr8xjS0NYJCCaESyeqsVyBMQu8a5AqIXL1ceG9umqeqjaS7_f3h1pLtd2NrXfmnotH9cNQhT6OHcf1aA8OuK1JQx0qpFqqKZB_nnS5r6Zi-lgSV0EZKaM_QDpt-af8T6iTHTskXuVgs5PTNQkpK5xKRWYZ_x4GTf3TckfF5nweE2GGsgQkQl1T2gB0_dKqnx04DHrpzNC6JghvKIRgm7l0MatLyLz9BACwBhAL3uf9nkFg8-fZ7g_2x8LrkPWbLGdIphP5n-dA99gZL6q16u0lEGeYztv1Xe5t70pjKUYrOs3KDtnppRknMsOfOw6e_qf09XAbUHNMfEtjeSplOaT8VCG2ikooAeDDURa91LOgIhdjsNmMfww13IytB0TnXSo7YBo1u7Of04cJ0WEUZnw2He3nrvcV9ORqphA7AMKSTLnRa8LrpUCB-0v7nMGlJXKDtFCxuq7FOTg6FsWwfnWyB5ukNKmgg2R_6whZF70qvhkwo0ja5wq7Hxg5aweZjW9-dhbdD9BBtHlVot968Q_FcKOpk6UPkVa6vRNPOo7TkQphsd2v1s_qfjwINEAsr8wLlqLx00p4NLvS2On1QUopi1IDFA31L_R54APXdjVHwrys8UpoPR2NpvBOY3gkGlBCXHjqlxcmvngqsAgs-RHtmzH7t190x0JdzpCnT4qqnDybU1OSHCZIqKfV09W82xjb2HR_RC3VKj-h9kqrhDzyIrPmUIDHtMrB0g77AS1WN6bgSvMetPi-fIcsEJSOex-FJUU00NNLXyZCWOOcjpOjI6kTe-YMN4cCC1UJ358h03OPnTHWXfhRMALI9t7-t5TPFjtb240FPJOISpBTNRn5QgoJ9ta5tOVy9DfUt_f9kmFteRhatyzCmZUKrW3m2xTuzU6eBxHgkvBz\",\n      \"tag\": \"3eXoXKxOB4rGZTNVb3i3Ew\"\n    },\n    \"id\": \"5b39cfe6-a9cd-11f0-9a17-3ec1cb51743a\",\n    \"proof\": [\n      {\n        \"type\": \"BJJSignature2021\",\n        \"issuerData\": {\n          \"id\": \"did:polygonid:polygon:amoy:2qXnMYUfndFcM4NVVjbCrzjfMj9eoDYw6Y7zXtHaHR\",\n          \"state\": {\n            \"claimsTreeRoot\": \"b0ddc3a021388c7547ea62567b105f0b01cfd2f2af0a4b9e3f67eae563796e2d\",\n            \"value\": \"1075a2a76ea979363f6ae1b96b90a63eed313495c42462e43c12c0fc499d0a11\"\n          },\n          \"authCoreClaim\": \"cca3371a6cb1b715004407e325bd993c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ac5b230672ab2b8406ca0d10eb7936d23195c9ebbc8e286a262d58d3cd06400ec248d78999b7b38007964a3bd2b46255ec41e686141c83d455db2eae5edc0140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n          \"mtp\": {\n            \"existence\": true,\n            \"siblings\": []\n          },\n          \"credentialStatus\": {\n            \"id\": \"https://issuernode-mumbai-protocol.polygonid.me/v2/agent\",\n            \"revocationNonce\": 0,\n            \"type\": \"Iden3commRevocationStatusV1.0\"\n          }\n        },\n        \"coreClaim\": \"c9b2370371b7fa8b3dab2a5ba81b68382a000000000000000000000000000000021204bfd2d528a8a70e276c14fd146df9c133be5dd3a9524db1022a2b530c0010b59b95eb5fa55505513b5b7ea79d46ff3c1cb1c8b50fe22171177bceac660b00000000000000000000000000000000000000000000000000000000000000003e6ae6d00000000046ef72710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"signature\": \"7117705347cbcf8f32d4147cfc0f4c916303c8c321acbf3173b62b30076ea82d46a96e591680f4c019c897c9c9cc91919dd8973d038e10366bd462290c32df00\"\n      }\n    ],\n    \"type\": \"KYCAgeCredential\"\n  }\n}\n</code></pre>"},{"location":"credentials/0.1/payment-request/","title":"Payment Request","text":"<p>type: <code>/credentials/0.1/payment-request</code></p> <p>General request format for payment from user.</p> <pre><code>{\n  \"agent\": \"&lt;issuer-agent-url&gt;\",\n  \"payments\": [\n    {\n      \"credentials\": [\n        {\n          \"type\": \"AML\",\n          \"context\": \"&lt;context-url&gt;\"\n        }\n      ],\n      \"data\":[{\n        \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld\",\n        \"type\":\"Iden3PaymentRequestCryptoV1 | Iden3PaymentRailsRequestV1 | Iden3PaymentRailsERC20RequestV1 | Iden3PaymentRailsSolanaRequestV1 | Iden3PaymentRailsSolanaSPLRequestV1\",\n        ...\n      }],\n      \"description\":\"you can pass the verification on our KYC provider by following the next link\",\n    }\n  ]\n}\n</code></pre> <p>Payment Request itself defines fields: agent, payments,   description, type, credentials and data.  Payment Data itself is also typed.  The possible types for data are: Iden3PaymentRequestCryptoV1, Iden3PaymentRailsRequestV1, Iden3PaymentRailsERC20RequestV1, Iden3PaymentRailsSolanaRequestV1, Iden3PaymentRailsSolanaSPLRequestV1;  Corresponding ld context for such types: https://schema.iden3.io/core/jsonld/payment.jsonld</p> Field Description Type Required agent Issuer URL to send payment response string \u2705 payments List of  payment requests list \u2705 payments[i].type Type of payment request (old version only) string \u274c payments[i].credentials List of  credentials that user requests for list \u2705 payments[i].description description of payment string \u2705 payments[i].credentials.context JSON-LD context url for credential string \u2705 payments[i].credentials.type Type in the given JSON-LD context string \u2705 payments[i].data Payment request specific details object or array of objects \u2705 <p>Iden3PaymentRequestCryptoV1 is a simple representation of payment request for only one chain. Type field specification: </p> Field Description Type Required id Payment id string \u2705 type Payment Type \"Iden3PaymentRequestCryptoV1\" \u2705 @context context for ld type string \u274c (historical backward compatibility) chainId chain id string \u2705 address smart-contract address that collects funds string \u2705 amount Payment amount string \u2705 currency chosen currency string (non negative integer) \u2705 expiration expiration of specific payment request string (ISO format) \u274c (historical backward compatibility) <p>Iden3PaymentRailsRequestV1 is a representation of payment data that can be used for setting request to multiple chains to pay only in native currency. Type field specification:</p> Field Description Type Required nonce Payment unique nonce for the issuer string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsRequestV1\" \u2705 @context context for ld type string \u2705 recipient withdrawal address of the issuer string \u2705 amount Specify amounts in the smallest unit of the currency or token (e.g., WEI for ETH or the smallest decimal for ERC-20 tokens). string (non negative integer) \u2705 expirationDate expiration of specific payment request string (ISO format) \u2705 proof w3c security proof object[] or object \u2705 metadata any additional request metadata string (hex) \u2705 <p>For now only support proof type is EIP 712 signature suite.  EIP712 domains are defined here, where <code>verifyingContract</code> is address of contract that accepts payments, name is <code>MCPayment</code> and version is <code>1.0.0</code>.  </p> Eip712 <pre><code>    {\n      \"EIP712Domain\": [\n        {\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\":  \"verifyingContract\",\n          \"type:\": \"address\"\n        }\n      ],\n      \"Iden3PaymentRailsRequestV1\": [\n        {\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\": \"expirationDate\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\": \"metadata\",\n          \"type\": \"bytes\"\n        }\n      ]\n    }\n</code></pre> <p>Iden3PaymentRailsERC20RequestV1 is a representation of payment data that can be used for setting request to multiple chains to pay only in ERC20 tokens. It has the same ideology with Iden3PaymentRailsRequestV1, but also it defines two additional fields: <code>tokenAddress</code> and <code>features</code>. Token address can be the address of any ERC20 token. Current recommended flow for client is to call function 'approve' on token contract and then payERC20 on payment contract, so it will send funds to recipient address. Features field can contain a list of EIPs that contract support. Now, on the client level only supported feature is Permit EIP-2612. In this case iw will be two calls to signer client but only one transaction to invoke the <code>payERC20Permit</code> function. </p> <p>Type field specification:</p> Field Description Type Required nonce Payment unique nonce for the issuer string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsERC20RequestV1\" \u2705 @context context for ld type string \u2705 recipient withdrawal address of the issuer string \u2705 tokenAddress address of the token contract string \u2705 features list of features supported by token contract( now only [\"EIP-2612\"]) string[] \u274c amount Specify amounts in the smallest unit of the currency or token (e.g., WEI for ETH or the smallest decimal for ERC-20 tokens). string (non negative integer) \u2705 expirationDate expiration of specific payment request string (ISO format) \u2705 proof w3c security proof object[] or object \u2705 metadata any additional request metadata string (hex) \u2705 <p>EIP712 domains for proof creation are defined here, where <code>verifyingContract</code> is address of contract that accepts payments, name is <code>MCPayment</code> and version is <code>1.0.0</code>.  </p> Eip712 <pre><code>    {\n      \"EIP712Domain\": [\n        {\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"version\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\":  \"verifyingContract\",\n          \"type:\": \"address\"\n        }\n      ],\n      \"Iden3PaymentRailsRequestERC20V1\": [ \n        {\n          \"name\": \"tokenAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\": \"expirationDate\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"name\": \"metadata\",\n          \"type\": \"bytes\"\n        }\n      ]\n    }\n</code></pre> <p>Iden3PaymentRailsSolanaRequestV1 is a representation of payment data that can be used for setting request to Solana chain to pay only in native currency. Type field specification:</p> Field Description Type Required nonce Payment unique nonce for the issuer string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsSolanaRequestV1\" \u2705 @context context for ld type string \u2705 recipient withdrawal address of the issuer string \u2705 amount amounts in lamports string (non negative integer) \u2705 expirationDate expiration of specific payment request string (ISO format) \u2705 proof w3c security proof object[] or object \u2705 metadata any additional request metadata string (hex) \u2705 <p>For now only support proof type is SolanaEd25519Signature2025. </p> <p>Iden3PaymentRailsSolanaSPLRequestV1 is a representation of payment data that can be used for setting request to Solana chain to pay only in SPL tokens. It has the same ideology with Iden3PaymentRailsSolanaRequestV1, but also it defines two additional fields: <code>tokenAddress</code> and <code>features</code>. Token address can be the address of any SPL token. Currently, no feature is supported at the client level.</p> <p>Type field specification:</p> Field Description Type Required nonce Payment unique nonce for the issuer string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsSolanaSPLRequestV1\" \u2705 @context context for ld type string \u2705 recipient withdrawal address of the issuer string \u2705 tokenAddress address of the token contract string \u2705 features list of features supported by token contract string[] \u274c amount smallest decimal for SPL tokens string (non negative integer) \u2705 expirationDate expiration of specific payment request string (ISO format) \u2705 proof w3c security proof object[] or object \u2705 metadata any additional request metadata string (hex) \u2705 <p>For now only support proof type is SolanaEd25519Signature2025. </p> <p>Examples of Iden3PaymentRequest with different data</p> Crypto <pre><code>    {\n      \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n      \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n      \"typ\": \"application/iden3comm-plain-json\",\n      \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n      \"body\": {\n         \"agent\": \"&lt;issuer-agent-url&gt;\", \n         \"payments\": [\n          {\n             \"credentials\": [\n              {\n               \"type\": \"AML\",\n               \"context\": \"&lt;context_url&gt;\"\n              }\n             ],\n             \"data\": [{\n                 \"type\":\"Iden3PaymentRequestCryptoV1\",\n                 \"amount\":\"10\", \n                 \"id\": \"ox\",\n                 \"chainId\": \"80002\", \n                 \"address\": \"0xpay1\",\n                 \"currency\": \"ETH\",\n                 \"expiration\": \"&lt;timestamp&gt;\"\n             }],\n            \"description\":\"you can pass the verification on our KYC provider by following the next link\",\n            }\n          ]\n      },\n      \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n      \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n    }\n</code></pre> Native <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n  \"body\": {\n    \"agent\": \"https://issuer.com\",\n    \"payments\": [\n      {\n        \"credentials\": [\n          {\n            \"type\": \"AML\",\n            \"context\": \"http://test.com\"\n          }\n        ],\n        \"data\": [\n          {\n            \"@context\": [\n              \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsRequestV1\",\n              \"https://w3id.org/security/suites/eip712sig-2021/v1\"\n            ],\n            \"type\": \"Iden3PaymentRailsRequestV1\",\n            \"recipient\": \"0xaddress\",\n            \"amount\": \"100\",\n            \"expirationDate\": \"ISO string\",\n            \"nonce\": \"25\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n              {\n                \"type\": \"EthereumEip712Signature2021\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"proofValue\": \"0xa05292e9874240c5c2bbdf5a8fefff870c9fc801bde823189fc013d8ce39c7e5431bf0585f01c7e191ea7bbb7110a22e018d7f3ea0ed81a5f6a3b7b828f70f2d1c\",\n                \"verificationMethod\": \"did:pkh:eip155:0:0x3e1cFE1b83E7C1CdB0c9558236c1f6C7B203C34e#blockchainAccountId\",\n                \"created\": \"2024-09-26T12:28:19.702580067Z\",\n                \"eip712\": {\n                  \"types\": \"https://schema.iden3.io/core/json/Iden3PaymentRailsRequestV1.json\",\n                  \"primaryType\": \"Iden3PaymentRailsRequestV1\",\n                  \"domain\": {\n                    \"name\": \"MCPayment\",\n                    \"version\": \"1.0.0\",\n                    \"chainId\": \"0x0\",\n                    \"verifyingContract\": \"0x0000000000000000000000000000000000000000\",\n                    \"salt\": \"\"\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        \"description\": \"you can pass the verification on our KYC provider by following the next link\"\n      }\n    ]\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> Erc20 <pre><code>{\n  \"id\": \"54782ed3-8d83-427b-856d-eac57a9aa94a\",\n  \"thid\": \"54782ed3-8d83-427b-856d-eac57a9aa94a\",\n  \"from\": \"did:iden3:polygon:amoy:xCRp75DgAdS63W65fmXHz6p9DwdonuRU9e46DifhX\",\n  \"to\": \"did:iden3:polygon:amoy:x7Z95VkUuyo6mqraJw2VGwCfqTzdqhM1RVjRHzcpK\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n  \"body\": {\n    \"agent\": \"\",\n    \"payments\": [\n      {\n        \"data\": [\n          {\n            \"type\": \"Iden3PaymentRailsERC20RequestV1\",\n            \"@context\": [\n              \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsERC20RequestV1\",\n              \"https://w3id.org/security/suites/eip712sig-2021/v1\"\n            ],\n            \"tokenAddress\": \"0x2FE40749812FAC39a0F380649eF59E01bccf3a1A\",\n            \"recipient\": \"0xE9D7fCDf32dF4772A7EF7C24c76aB40E4A42274a\",\n            \"amount\": \"40\",\n            \"expirationDate\": \"2024-10-28T16:02:36.816Z\",\n            \"nonce\": \"3008\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n              {\n                \"type\": \"EthereumEip712Signature2021\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"proofValue\": \"0xc3d9d6fa9aa7af03863943f7568ce61303e84221e3e29277309fd42581742024402802816cca5542620c19895331f4bdc1ea6fed0d0c6a1cf8656556d3acfde61b\",\n                \"verificationMethod\": \"did:pkh:eip155:80002:0xE9D7fCDf32dF4772A7EF7C24c76aB40E4A42274a#blockchainAccountId\",\n                \"created\": \"2024-10-28T15:02:36.946Z\",\n                \"eip712\": {\n                  \"types\": \"https://schema.iden3.io/core/json/Iden3PaymentRailsRequestV1.json\",\n                  \"primaryType\": \"Iden3PaymentRailsRequestV1\",\n                  \"domain\": {\n                    \"name\": \"MCPayment\",\n                    \"version\": \"1.0.0\",\n                    \"chainId\": \"80002\",\n                    \"verifyingContract\": \"0x6f742EBA99C3043663f995a7f566e9F012C07925\"\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        \"credentials\": [\n          {\n            \"type\": \"AML\",\n            \"context\": \"http://test.com\"\n          }\n        ],\n        \"description\": \"Iden3PaymentRailsRequestV1 payment-request integration test\"\n      }\n    ]\n  }\n}\n</code></pre> Eip-2612 <pre><code>{\n  \"id\": \"54782ed3-8d83-427b-856d-eac57a9aa94a\",\n  \"thid\": \"54782ed3-8d83-427b-856d-eac57a9aa94a\",\n  \"from\": \"did:iden3:polygon:amoy:xCRp75DgAdS63W65fmXHz6p9DwdonuRU9e46DifhX\",\n  \"to\": \"did:iden3:polygon:amoy:x7Z95VkUuyo6mqraJw2VGwCfqTzdqhM1RVjRHzcpK\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n  \"body\": {\n    \"agent\": \"agent.example.com\",\n    \"payments\": [\n      {\n        \"data\": [\n          {\n            \"type\": \"Iden3PaymentRailsERC20RequestV1\",\n            \"@context\": [\n              \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsERC20RequestV1\",\n              \"https://w3id.org/security/suites/eip712sig-2021/v1\"\n            ],\n            \"tokenAddress\": \"0x2FE40749812FAC39a0F380649eF59E01bccf3a1A\",\n            \"features\": [\"EIP-2612\"],\n            \"recipient\": \"0xE9D7fCDf32dF4772A7EF7C24c76aB40E4A42274a\",\n            \"amount\": \"40\",\n            \"expirationDate\": \"2024-10-28T16:02:36.816Z\",\n            \"nonce\": \"3008\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n              {\n                \"type\": \"EthereumEip712Signature2021\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"proofValue\": \"0xc3d9d6fa9aa7af03863943f7568ce61303e84221e3e29277309fd42581742024402802816cca5542620c19895331f4bdc1ea6fed0d0c6a1cf8656556d3acfde61b\",\n                \"verificationMethod\": \"did:pkh:eip155:80002:0xE9D7fCDf32dF4772A7EF7C24c76aB40E4A42274a#blockchainAccountId\",\n                \"created\": \"2024-10-28T15:02:36.946Z\",\n                \"eip712\": {\n                  \"types\": \"https://schema.iden3.io/core/json/Iden3PaymentRailsRequestV1.json\",\n                  \"primaryType\": \"Iden3PaymentRailsRequestV1\",\n                  \"domain\": {\n                    \"name\": \"MCPayment\",\n                    \"version\": \"1.0.0\",\n                    \"chainId\": \"80002\",\n                    \"verifyingContract\": \"0x6f742EBA99C3043663f995a7f566e9F012C07925\"\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        \"credentials\": [\n          {\n            \"type\": \"AML\",\n            \"context\": \"http://test.com\"\n          }\n        ],\n        \"description\": \"Iden3PaymentRailsRequestV1 payment-request integration test\"\n      }\n    ]\n  }\n}\n</code></pre> Solana-native <pre><code>{\n    \"id\": \"84523aa3-1b1b-4cde-9b18-6662d796a020\",\n    \"thid\": \"84523aa3-1b1b-4cde-9b18-6662d796a020\",\n    \"from\": \"did:iden3:polygon:amoy:x6x5sor7zpyZX9yNpm8h1rPBDSN9idaEhDj1Qm8Q9\",\n    \"to\": \"did:iden3:polygon:amoy:x7Z95VkUuyo6mqraJw2VGwCfqTzdqhM1RVjRHzcpK\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n    \"body\": {\n      \"agent\": \"https://agent-url.com\",\n      \"payments\": [\n        {\n          \"data\": [\n            {\n              \"type\": \"Iden3PaymentRailsSolanaRequestV1\",\n              \"@context\": [\n                \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsSolanaRequestV1\",\n                \"https://schema.iden3.io/core/jsonld/solanaEd25519.jsonld\"\n              ],\n              \"recipient\": \"HcCoHQFPjU2brBFW1hAZvEtZx7nSrYCBJVq4vKsjo6jf\",\n              \"amount\": \"44000000\",\n              \"expirationDate\": \"2025-08-12T14:03:26.728Z\",\n              \"nonce\": \"31231231233\",\n              \"metadata\": \"0x\",\n              \"proof\": [\n                {\n                  \"type\": \"SolanaEd25519Signature2025\",\n                  \"proofPurpose\": \"assertionMethod\",\n                  \"proofValue\": \"024e6579f78669c7d456ea4b286d5c33ee85b2def2ee77a9287e1c79f0b757422df86ae5df5b9d892c9a97484fa9587349cd13ca9c8ff39f8a6e6042ca7e6107\",\n                  \"created\": \"2025-08-12T13:03:26.762Z\",\n                  \"verificationMethod\": \"did:pkh:solana:103:CTZbbbcSpZy4pxpFwhQGdf8u3hxPWKRh5ywRHuNzn2Aa\",\n                  \"domain\": {\n                    \"version\": \"SolanaEd25519NativeV1\",\n                    \"chainId\": \"103\",\n                    \"verifyingContract\": \"Hys6CpX8McHbPBaPKbRYGVdXVxor1M5pSZUDMMwakGmM\"\n                  }\n                }\n              ]\n            }\n          ],\n          \"credentials\": [\n            {\n              \"type\": \"AML\",\n              \"context\": \"http://test.com\"\n            }\n          ],\n          \"description\": \"Iden3PaymentRailsRequestSolanaV1 payment-request\"\n        }\n      ]\n    },\n    \"created_time\": 1755003806\n}\n</code></pre> Solana-spl <pre><code>{\n    \"id\": \"70574bc1-2472-4fa0-b7b1-b79a84376fab\",\n    \"thid\": \"70574bc1-2472-4fa0-b7b1-b79a84376fab\",\n    \"from\": \"did:iden3:polygon:amoy:x6x5sor7zpyZX9yNpm8h1rPBDSN9idaEhDj1Qm8Q9\",\n    \"to\": \"did:iden3:polygon:amoy:x7Z95VkUuyo6mqraJw2VGwCfqTzdqhM1RVjRHzcpK\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n    \"body\": {\n      \"agent\": \"https://agent-url.com\",\n      \"payments\": [\n        {\n          \"data\": [\n            {\n              \"type\": \"Iden3PaymentRailsSolanaSPLRequestV1\",\n              \"@context\": [\n                \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsSolanaSPLRequestV1\",\n                \"https://schema.iden3.io/core/jsonld/solanaEd25519.jsonld\"\n              ],\n              \"recipient\": \"HcCoHQFPjU2brBFW1hAZvEtZx7nSrYCBJVq4vKsjo6jf\",\n              \"amount\": \"500000000\",\n              \"expirationDate\": \"2025-08-12T14:14:54.421Z\",\n              \"nonce\": \"11212312003\",\n              \"metadata\": \"0x\",\n              \"proof\": [\n                {\n                  \"type\": \"SolanaEd25519Signature2025\",\n                  \"proofPurpose\": \"assertionMethod\",\n                  \"proofValue\": \"378f2941ef5f87b85445b803405620f8e300a05b627e07f51edbf886610cddc4f1dbdbaf6fa1693d975953d1783cbf5dbe0f9e0b5708978eef1fec1e7964a90a\",\n                  \"created\": \"2025-08-12T13:14:54.453Z\",\n                  \"verificationMethod\": \"did:pkh:solana:103:CTZbbbcSpZy4pxpFwhQGdf8u3hxPWKRh5ywRHuNzn2Aa\",\n                  \"domain\": {\n                    \"version\": \"SolanaEd25519SPLV1\",\n                    \"chainId\": \"103\",\n                    \"verifyingContract\": \"Hys6CpX8McHbPBaPKbRYGVdXVxor1M5pSZUDMMwakGmM\"\n                  }\n                }\n              ],\n              \"tokenAddress\": \"4MjRhSkDaXmgdAL9d9UM7kmgJrWYGJH66oocUN2f3VUp\"\n            }\n          ],\n          \"credentials\": [\n            {\n              \"type\": \"AML\",\n              \"context\": \"http://test.com\"\n            }\n          ],\n          \"description\": \"Iden3PaymentRailsRequestSolanaSPLV1 payment-request integration test\"\n        }\n      ]\n    },\n    \"created_time\": 1755004494\n  } \n</code></pre> Multiple <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment-request\",\n  \"body\": {\n    \"agent\": \"https://issuer.com\",\n    \"payments\": [\n      {\n        \"credentials\": [\n          {\n            \"type\": \"AML\",\n            \"context\": \"http://test.com\"\n          }\n        ],\n        \"data\": [\n          {\n            \"@context\": [\n              \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsRequestV1\",\n              \"https://w3id.org/security/suites/eip712sig-2021/v1\"\n            ],\n            \"type\": \"Iden3PaymentRailsRequestV1\",\n            \"recipient\": \"0xaddress\",\n            \"amount\": \"100\",\n            \"expirationDate\": \"ISO string\",\n            \"nonce\": \"25\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n              {\n                \"type\": \"EthereumEip712Signature2021\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"proofValue\": \"0xa05292e9874240c5c2bbdf5a8fefff870c9fc801bde823189fc013d8ce39c7e5431bf0585f01c7e191ea7bbb7110a22e018d7f3ea0ed81a5f6a3b7b828f70f2d1c\",\n                \"verificationMethod\": \"did:pkh:eip155:0:0x3e1cFE1b83E7C1CdB0c9558236c1f6C7B203C34e#blockchainAccountId\",\n                \"created\": \"2024-09-26T12:28:19.702580067Z\",\n                \"eip712\": {\n                  \"types\": \"https://schema.iden3.io/core/json/Iden3PaymentRailsRequestV1.json\",\n                  \"primaryType\": \"Iden3PaymentRailsRequestV1\",\n                  \"domain\": {\n                    \"name\": \"MCPayment\",\n                    \"version\": \"1.0.0\",\n                    \"chainId\": \"0x0\",\n                    \"verifyingContract\": \"0x0000000000000000000000000000000000000000\",\n                    \"salt\": \"\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"type\": \"Iden3PaymentRailsERC20RequestV1\",\n            \"@context\": [\n              \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsERC20RequestV1\",\n              \"https://w3id.org/security/suites/eip712sig-2021/v1\"\n            ],\n            \"tokenAddress\": \"0x2FE40749812FAC39a0F380649eF59E01bccf3a1A\",\n            \"features\": [\n              \"EIP-2612\"\n            ],\n            \"recipient\": \"0xE9D7fCDf32dF4772A7EF7C24c76aB40E4A42274a\",\n            \"amount\": \"40\",\n            \"expirationDate\": \"2024-10-28T16:02:36.816Z\",\n            \"nonce\": \"3008\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n              {\n                \"type\": \"EthereumEip712Signature2021\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"proofValue\": \"0xc3d9d6fa9aa7af03863943f7568ce61303e84221e3e29277309fd42581742024402802816cca5542620c19895331f4bdc1ea6fed0d0c6a1cf8656556d3acfde61b\",\n                \"verificationMethod\": \"did:pkh:eip155:80002:0xE9D7fCDf32dF4772A7EF7C24c76aB40E4A42274a#blockchainAccountId\",\n                \"created\": \"2024-10-28T15:02:36.946Z\",\n                \"eip712\": {\n                  \"types\": \"https://schema.iden3.io/core/json/Iden3PaymentRailsRequestV1.json\",\n                  \"primaryType\": \"Iden3PaymentRailsRequestV1\",\n                  \"domain\": {\n                    \"name\": \"MCPayment\",\n                    \"version\": \"1.0.0\",\n                    \"chainId\": \"80002\",\n                    \"verifyingContract\": \"0x6f742EBA99C3043663f995a7f566e9F012C07925\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"@context\": [\n              \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsRequestV1\",\n              \"https://w3id.org/security/suites/eip712sig-2021/v1\"\n            ],\n            \"type\": \"Iden3PaymentRailsRequestV1\",\n            \"recipient\": \"0xaddress2\",\n            \"amount\": \"200\",\n            \"expirationDate\": \"ISO string\",\n            \"nonce\": \"25\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n              {\n                \"type\": \"EthereumEip712Signature2021\",\n                \"proofPurpose\": \"assertionMethod\",\n                \"proofValue\": \"0xa05292e9874240c5c2bbdf5a8fefff870c9fc801bde823189fc013d8ce39c7e5431bf0585f01c7e191ea7bbb7110a22e018d7f3ea0ed81a5f6a3b7b828f70f2d1c\",\n                \"verificationMethod\": \"did:pkh:eip155:0:0x3e1cFE1b83E7C1CdB0c9558236c1f6C7B203C34e#blockchainAccountId\",\n                \"created\": \"2024-09-26T12:28:19.702580067Z\",\n                \"eip712\": {\n                  \"types\": \"https://schema.iden3.io/core/json/Iden3PaymentRailsRequestV1.json\",\n                  \"primaryType\": \"Iden3PaymentRailsRequestV1\",\n                  \"domain\": {\n                    \"name\": \"MCPayment\",\n                    \"version\": \"1.0.0\",\n                    \"chainId\": \"0x1\",\n                    \"verifyingContract\": \"0x0000000000000000000000000000000000000002\",\n                    \"salt\": \"\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"type\": \"Iden3PaymentRailsSolanaRequestV1\",\n            \"@context\": [\n            \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsSolanaRequestV1\",\n            \"https://schema.iden3.io/core/jsonld/solanaEd25519.jsonld\"\n            ],\n            \"recipient\": \"HcCoHQFPjU2brBFW1hAZvEtZx7nSrYCBJVq4vKsjo6jf\",\n            \"amount\": \"44000000\",\n            \"expirationDate\": \"2025-08-12T14:03:26.728Z\",\n            \"nonce\": \"31231231233\",\n            \"metadata\": \"0x\",\n            \"proof\": [\n            {\n              \"type\": \"SolanaEd25519Signature2025\",\n              \"proofPurpose\": \"assertionMethod\",\n              \"proofValue\": \"024e6579f78669c7d456ea4b286d5c33ee85b2def2ee77a9287e1c79f0b757422df86ae5df5b9d892c9a97484fa9587349cd13ca9c8ff39f8a6e6042ca7e6107\",\n              \"created\": \"2025-08-12T13:03:26.762Z\",\n              \"verificationMethod\": \"did:pkh:solana:103:CTZbbbcSpZy4pxpFwhQGdf8u3hxPWKRh5ywRHuNzn2Aa\",\n              \"domain\": {\n              \"version\": \"SolanaEd25519NativeV1\",\n              \"chainId\": \"103\",\n              \"verifyingContract\": \"Hys6CpX8McHbPBaPKbRYGVdXVxor1M5pSZUDMMwakGmM\"\n              }\n            }\n            ]\n          }\n        ],\n        \"description\": \"you can pass the verification on our KYC provider by following the next link\"\n      }\n    ]\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre>"},{"location":"credentials/0.1/payment/","title":"Payment","text":"<p>type: <code>/credentials/0.1/payment</code></p> <p>General payment message from user.</p> <pre><code>{\n  \"goal_code\": \"iden3comm.credentials.v1-1.proposal-request\",\n  \"payments\": [\n    {\n      \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld\",\n      \"type\": \"Iden3PaymentCryptoV1 | Iden3PaymentRailsV1 | Iden3PaymentRailsERC20V1 | Iden3PaymentRailsSolanaV1 | Iden3PaymentRailsSolanaSPLV1\",\n      ...\n    }\n  ]\n}\n</code></pre> <p>Payment message itself defines fields: payments  Payment object itself is also typed. The possible types for payment object are: Iden3PaymentCryptoV1 , Iden3PaymentRailsV1 , Iden3PaymentRailsERC20V1 , Iden3PaymentRailsSolanaV1 , Iden3PaymentRailsSolanaSPLV1 .  Corresponding ld context for such types: https://schema.iden3.io/core/jsonld/payment.jsonld</p> Field Description Type Required goal_code Goal code when the payment information can be used string \u274c payments List of  payment requests list \u2705 payments[i].type Payment Type string \u2705 <p>Iden3PaymentCryptoV1 is a simple representation of payment response for only one chain. Type field specification:</p> Field Description Type Required id Payment id string \u2705 type Payment Type \"Iden3PaymentCryptoV1\" \u2705 @context type  ld context url string \u274c (historical backward compatibility) paymentData Payment Type object \u2705 paymentData.txId Transaction hash string \u2705 <p>Iden3PaymentRailsV1 is a representation of payment data that is result of sending native payment. Type field specification:</p> Field Description Type Required nonce Payment unique nonce string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsV1\" \u2705 @context type  ld context url string \u2705 paymentData Payment Type object \u2705 paymentData.txId Transaction hash string \u2705 paymentData.chainId chain id in which payment has been done string \u2705 <p>Iden3PaymentRailsERC20V1 is a representation of payment data that is result of sending payment using erc20 token. Type field specification:</p> Field Description Type Required nonce Payment unique nonce string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsERC20V1\" \u2705 @context type  ld context url string \u2705 paymentData Payment Type object \u2705 paymentData.txId Transaction hash string \u2705 paymentData.chainId chain id in which payment has been done string \u2705 paymentData.tokenAddress address of token contract string \u2705 <p>Iden3PaymentRailsSolanaV1 is a representation of payment data that is result of sending native payment on Solana chain. Type field specification:</p> Field Description Type Required nonce Payment unique nonce string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsSolanaV1\" \u2705 @context type  ld context url string \u2705 paymentData Payment Type object \u2705 paymentData.txId Transaction hash string \u2705 paymentData.chainId chain id in which payment has been done string \u2705 <p>Iden3PaymentRailsSolanaSPLV1 is a representation of payment data that is result of sending payment using SPL token. Type field specification:</p> Field Description Type Required nonce Payment unique nonce string  (non negative integer) \u2705 type Payment Type \"Iden3PaymentRailsSolanaSPLV1\" \u2705 @context type  ld context url string \u2705 paymentData Payment Type object \u2705 paymentData.txId Transaction hash string \u2705 paymentData.chainId chain id in which payment has been done string \u2705 paymentData.tokenAddress address of SPL contract string \u2705 <p>Examples of credential payment responses different payment types:</p> Crypto <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment\",\n  \"body\": {\n     \"payments\": [\n          {\n           \"id\":\"123\",\n           \"type\":\"Iden3PaymentCryptoV1\",\n           \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld\",\n            \"paymentData\": { \n               \"txId\": \"0x123\"\n            }\n         }\n      ]\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> Native <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment\",\n  \"body\": {\n     \"payments\": [\n          {\n           \"nonce\":\"123\",\n           \"type\":\"Iden3PaymentRailsV1\",\n           \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld\",\n            \"paymentData\": { \n               \"txId\": \"0x123\",\n               \"chainId\": \"123\"\n            }\n         }\n      ]\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> Erc20 <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment\",\n  \"body\": {\n     \"payments\": [\n          {\n           \"nonce\":\"123\",\n           \"type\":\"Iden3PaymentRailsERC20V1\",\n           \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld\",\n            \"paymentData\": { \n               \"txId\": \"0x123\",\n               \"chainId\": \"123\",\n               \"tokenAddress\": \"0x123\" \n            }\n         }\n      ]\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> Solana-native <pre><code>{\n  \"id\": \"881549e2-6630-470c-8a55-06d434b3ed38\",\n  \"thid\": \"881549e2-6630-470c-8a55-06d434b3ed38\",\n  \"from\": \"did:iden3:polygon:amoy:x7Z95VkUuyo6mqraJw2VGwCfqTzdqhM1RVjRHzcpK\",\n  \"to\": \"did:iden3:polygon:amoy:x6x5sor7zpyZX9yNpm8h1rPBDSN9idaEhDj1Qm8Q9\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment\",\n  \"body\": {\n    \"payments\": [\n    {\n      \"nonce\": \"6\",\n      \"type\": \"Iden3PaymentRailsSolanaV1\",\n      \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsSolanaV1\",\n      \"paymentData\": {\n      \"txId\": \"3fVGavvAduvdLruYEq3QKEtCkKQ5smWVyELXen4qw15YHDEM8XZc9wmW6mtzXkmGC8rD8d7cDjVapfUSu5VtXzf9\",\n      \"chainId\": \"103\"\n      }\n    }\n    ]\n  },\n  \"created_time\": 1754572018\n  }  \n</code></pre> Solana-spl <pre><code>{\n  \"id\": \"dd25cf2f-bdfd-48fa-b02d-ca5872f30300\",\n  \"thid\": \"dd25cf2f-bdfd-48fa-b02d-ca5872f30300\",\n  \"from\": \"did:iden3:polygon:amoy:x7Z95VkUuyo6mqraJw2VGwCfqTzdqhM1RVjRHzcpK\",\n  \"to\": \"did:iden3:polygon:amoy:x6x5sor7zpyZX9yNpm8h1rPBDSN9idaEhDj1Qm8Q9\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/0.1/payment\",\n  \"body\": {\n    \"payments\": [\n    {\n      \"nonce\": \"10008\",\n      \"type\": \"Iden3PaymentRailsSolanaSPLV1\",\n      \"@context\": \"https://schema.iden3.io/core/jsonld/payment.jsonld#Iden3PaymentRailsSolanaSPLV1\",\n      \"paymentData\": {\n      \"txId\": \"3hefbgPeWZLK1d9C9gY4Dbj5GoYpGY7Khyo6yewQa2wbdAgKMTpKB6HAKyQTxQWeKEANwi3618peYk5cCxBGF2nQ\",\n      \"chainId\": \"103\",\n      \"tokenAddress\": \"4MjRhSkDaXmgdAL9d9UM7kmgJrWYGJH66oocUN2f3VUp\"\n      }\n    }\n    ]\n  },\n  \"created_time\": 1754575183\n  } \n</code></pre>"},{"location":"credentials/0.1/proposal-request/","title":"Proposal Request","text":"<p>type: <code>/credentials/0.1/proposal-request</code></p> <p>Request for proposal is created by user and sent to issuer to receive instructions how to obtain a Verifiable Credential of certain type <pre><code>{\n  \"credentials\": [\n    {\n      \"type\": \"&lt;vc_type&gt;\",\n      \"context\": \"&lt;vc_ld_context&gt;\"\n    }\n  ],\n  \"did_doc\": {\n    \"@context\": [\n      \"...\"\n    ],\n    \"id\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n    \"services\": []\n  }\n}\n</code></pre></p> Field Description Type Required did_doc User did document JSON \u274c credentials List of  credentials that user requests for list \u2705 credentials[i].type type of VC string \u2705 credentials[i].context JSON-LD of VC string \u2705 <ul> <li>Example of credential proposal request:</li> </ul> <pre><code>    {\n      \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n      \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n      \"typ\": \"application/iden3comm-plain-json\",\n      \"type\": \"https://iden3-communication.io/credentials/0.1/proposal-request\",\n      \"body\": {\n        \"credentials\": [\n          {\n            \"type\": \"LivenessProof\",\n            \"context\": \"context_url\"\n          },\n          {\n            \"type\": \"KYC\",\n            \"context\": \"&lt;context_url&gt;\"\n          }\n        ],\n        \"did_doc\": {\n          \"@context\": [\n            \"...\"\n          ],\n          \"id\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n          \"services\": [\n            {\n              \"id\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2/mobile\",\n              \"type\": \"Iden3Mobile\"\n            },\n            {\n              \"id\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2/push\",\n              \"type\": \"PushNotificationService\"\n            }\n          ]\n        }\n      },\n      \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n      \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n    } \n</code></pre>"},{"location":"credentials/0.1/proposal/","title":"Proposal","text":"<p>type: <code>/credentials/1.0/proposal</code></p> <p>Proposals message represents set of instructions how to obtain a Verifiable Credential of certain type</p> <pre><code>{\n  \"proposals\": [\n    {\n      \"credentials\": [\n        {\n          \"type\": \"LivenessProof\",\n          \"context\": \"&lt;context_url&gt;\"\n        },\n        {\n          \"type\": \"KYC\",\n          \"context\": \"&lt;context_url&gt;\"\n        }\n      ],\n      \"type\": \"WebVerificationForm\",\n      \"url\": \"https://&lt;issuer-agent-url&gt;/verify?anyUniqueIdentifierOfSession=55\",\n      \"expiration\": \"timestamp\",\n      \"description\":\"you can pass the verification on our KYC provider by following the next link\",\n    }\n  ]\n}\n</code></pre> Field Description Type Required proposals List of proposals that issuer offers to user list \u2705 proposals[i].url URL to HTML verification form string \u2705 proposals[i].credentials List of credentials that user requests for list \u2705 proposals[i].credentials[j].type Type of VC string \u2705 proposals[i].credentials[j].context JSON-LD of VC string \u2705 proposals[i].type Type of proposal object string \u2705 proposals[i].expiration Expiration timestamp timestamp as string \u274c proposals[i].description Description of the proposal string \u274c <ul> <li>Example of credential proposal:</li> </ul> <pre><code>  {\n    \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n    \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"type\": \"https://iden3-communication.io/credentials/0.1/proposal\",\n    \"body\": {\n       \"proposals\": [\n         {\n           \"credentials\": [\n                {\n                 \"type\": \"LivenessProof\",\n                 \"context\": \"&lt;context_url&gt;\"\n                },\n                {\n                 \"type\": \"KYC\",\n                 \"context\": \"&lt;context_url&gt;\"\n                }\n               ],\n           \"type\": \"WebVerificationForm\",\n           \"url\": \"https://&lt;issuer-agent-url&gt;/verify?anyUniqueIdentifierOfSession=55\",\n           \"expiration\": \"timestamp\",\n           \"description\":\"you can pass the verification on our KYC provider by following the next link\",\n         }\n       ]\n    },\n    \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n    \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n  }\n</code></pre>"},{"location":"credentials/1.0/fetch-request/","title":"Fetch Request","text":"<p>type: <code>/credentials/1.0/fetch-request</code></p> <p>Request for fetch an VC from an issuer.</p> <pre><code>{\n    \"id\": \"&lt;uuid_of_credential&gt;\"\n}\n</code></pre> Field Description Type Required id UUID of credential that will fetch string \u2705 <ul> <li> <p>Example of credential fetch request:</p> <pre><code>{\n  \"id\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n  \"thid\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/fetch-request\",\n  \"body\": {\n    \"id\": \"af9293c5-3c91-40d7-b810-564ae693a578\"\n  },\n  \"from\": \"did:polygonid:polygon:mumbai:2qJG6RYgN1u6v7JAYSdfixSwktnZ7hMzd4t21SCdNu\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\"\n}\n</code></pre> </li> </ul>"},{"location":"credentials/1.0/issuance-request/","title":"Issuance Request","text":"<p>type: <code>/credentials/1.0/issuance-request</code></p> <p>Request for the issuance of a verifiable credential to a user.</p> <pre><code>{\n    \"schema\": \"&lt;schema_hash&gt;\",\n    \"data\": \"&lt;verifiable_credential_content&gt;\",\n    \"expiration\": \"&lt;expiration_time&gt;\"\n}\n</code></pre> Field Description Type Required schema The hash of the JSON schema employed in creating the content of the verifiable credential. string \u2705 data JSON reprecendation of credential content JSON \u2705 expiration The time until which VC is considered valid UNIX timestamp(int64) \u2705 <ul> <li> <p>Example of credential issuance request:</p> <pre><code>{\n  \"id\": \"890d5eff-f931-482a-8c31-7540ef7bcffb\",\n  \"thid\": \"890d5eff-f931-482a-8c31-7540ef7bcffb\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/issuance-request\",\n  \"body\": {\n    \"data\": {\n      \"birthday\": 19960424,\n      \"documentType\": 1\n    },\n    \"expiration\": 1660914469,\n    \"schema\": {\n      \"type\": \"KYCAgeCredential\",\n      \"url\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json\"\n    }\n  },\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qJG6RYgN1u6v7JAYSdfixSwktnZ7hMzd4t21SCdNu\"\n}\n</code></pre> </li> </ul>"},{"location":"credentials/1.0/issuance-response/","title":"Issuance Response","text":"<p>type: <code>/credentials/1.0/issuance-response</code></p> <p>Message contains W3Credential </p> <pre><code> {\n    \"credential\":  {\n      \"id\": \"urn:uuid:&lt;credential_uuid&gt;\",\n      \"@context\": [\"&lt;list_of_contexts&gt;\"],\n      \"@type\": [\"&lt;credential_types&gt;\"],\n      \"expiration\": \"&lt;expiration_time&gt;\",\n      \"updatable\": \"&lt;is_updatable_credential&gt;\",\n      \"version\": \"&lt;credential_version&gt;\",\n      \"rev_nonce\": \"&lt;credential_revocation_nonce&gt;\",\n      \"credentialSubject\": {\"&lt;credential_subject&gt;\"},\n      \"credentialSchema\": {\"&lt;credential_schema&gt;\"},\n      \"credentialStatus\": {\"&lt;credential_status&gt;\"},\n      \"proof\": [\"&lt;list_of_proofs&gt;\"]\n    }\n } \n</code></pre> Field Description Type Required credential.id ID of VC string \u2705 credential.@context List of contexts list of strings \u2705 credential.@type Types of credential list of strings \u2705 credential.expiration The time until which VC is considered valid string \u2705 credential.credentialSubject Information about subject *object \u2705 credential.credentialSchema Information about JSON schema that was used for create the credentials.credentialSubject object \u2705 credential.credentialStatus Information about revocation the V *object \u2705 credential.proof List of proofs that the VC has *list of object \u2705 <p>Content of <code>credentials.credentialSubject</code> object depends of <code>credentials.credentialSchema</code>.</p> <ul> <li>Example of credential issuance:</li> </ul> <pre><code>{\n  \"id\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n  \"thid\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/issuance-response\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n  \"body\": {\n    \"credential\": {\n      \"id\": \"urn:uuid:53a608cb-b5b6-4cc9-96a8-c230ff955554\",\n      \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://schema.iden3.io/core/jsonld/iden3proofs.jsonld\",\n        \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\"\n      ],\n      \"type\": [\n        \"VerifiableCredential\",\n        \"KYCAgeCredential\"\n      ],\n      \"credentialSubject\": {\n        \"id\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n        \"birthday\": 19960424,\n        \"documentType\": 99,\n        \"type\": \"KYCAgeCredential\"\n      },\n      \"issuer\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n      \"expirationDate\": \"2058-07-10T11:33:20.000Z\",\n      \"issuanceDate\": \"2023-09-07T14:36:48.074Z\",\n      \"credentialSchema\": {\n        \"id\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json\",\n        \"type\": \"JsonSchema2023\"\n      },\n      \"credentialStatus\": {\n        \"id\": \"https://rhs-staging.polygonid.me\",\n        \"revocationNonce\": 1000,\n        \"type\": \"Iden3ReverseSparseMerkleTreeProof\"\n      },\n      \"proof\": [\n        {\n          \"type\": \"BJJSignature2021\",\n          \"issuerData\": {\n            \"id\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n            \"state\": {\n              \"rootOfRoots\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n              \"revocationTreeRoot\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n              \"claimsTreeRoot\": \"5e5dca21a62dfbbd8b984a997dd9d666b6710d5499906301b19fb6996bfc1a02\",\n              \"value\": \"139042475daf67e0c340aef5540f8979b46a0eed13951c6ce60dad8875d1ab1e\"\n            },\n            \"authCoreClaim\": \"cca3371a6cb1b715004407e325bd993c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007cc77af06d6ea9f91434ce69e46821371cc341eb9e190262a16f46d15410ce0d1a090d38ded1e32a74e5fa0908764606adbcb917edff84b6ca60968d8a8d79090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n            \"mtp\": {\n              \"existence\": true,\n              \"siblings\": []\n            },\n            \"credentialStatus\": {\n              \"id\": \"https://rhs-staging.polygonid.me\",\n              \"revocationNonce\": 0,\n              \"type\": \"Iden3ReverseSparseMerkleTreeProof\"\n            }\n          },\n          \"coreClaim\": \"c9b2370371b7fa8b3dab2a5ba81b68382a00000000000000000000000000000002128459e997f3d9402b75af3fb9ad1e2db8f3288d3f5b6a13fa833621070d0069dee7de22463f48d75e219aed6cebcaadde18c1aacce28cd53db0317d1e9d2b0000000000000000000000000000000000000000000000000000000000000000e80300000000000080d481a60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n          \"signature\": \"4fb847963a0903ead57a45bcf511f84067b092aa5b21e95349ad3cf284f2678b8522765989e807ec7ab36ca541dab96a0604abc1a1ea27db1bf59a23f0686f04\"\n        }\n      ]\n    }\n  }\n }\n</code></pre>"},{"location":"credentials/1.0/offer/","title":"Offer","text":"<p>type: <code>/credentials/1.0/offer</code></p> <p>The offer message comprises information regarding the available verifiable credentials (VCs) from an issuer.</p> <pre><code>{\n    \"url\": \"&lt;issuer_url&gt;\",\n    \"credentials\": [\n        {\n            \"id\": \"&lt;vc_uuid&gt;\",\n            \"description\": \"&lt;vc_description&gt;\",\n            \"status\": \"pending | completed | rejected\"\n        }\n    ]\n}\n</code></pre> Field Description Type Required url Issuer URL for fetch credential string \u2705 credentials List of available credentials on issuer for fetch list \u2705 credentials.id ID of VC string \u2705 credentials.description Additional description of VC string \u274c credentials.status Status of the offer for VC. If omitted should be considered as completed string \u274c <ul> <li> <p>Example of credential offer:</p> <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/offer\",\n  \"body\": {\n    \"credentials\": [\n      {\n        \"description\": \"KYCAgeCredential\",\n        \"id\": \"c7b66a79-b930-49d1-9a97-66ab8fd792ac\"\n      }\n    ],\n    \"url\": \"http://issuer-agent.com/\"\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> </li> </ul>"},{"location":"credentials/1.0/onchain-offer/","title":"Onchain-offer","text":"<p>type: <code>/credentials/1.0/onchain-offer</code></p> <p>The onchain offer message comprises information regarding the available verifiable credentials (VCs) from an onchain issuer.</p> <pre><code>{\n    \"transaction_data\": \"{&lt;information_about_smart_contract&gt;}\",\n    \"credentials\": [\n        {\n            \"id\": \"&lt;vc_uuid&gt;\",\n            \"description\": \"&lt;vc_description&gt;\"\n        }\n    ]\n}\n</code></pre> Field Description Type Required credentials List of available credentials on onchain issuer for fetch list \u2705 credentials.id ID of onchain credential string \u2705 credentials.description Additional description of VC string \u274c transaction_data.contract_address Smart contract address string \u2705 transaction_data.method_id Smart contract method (hash from sc method name) string \u2705 transaction_data.chain_id Chain identification string \u2705 transaction_data.network Chain network string \u2705 <ul> <li> <p>Example of credential onchain offer:</p> <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/onchain-offer\",\n  \"body\": {\n    \"credentials\": [\n      {\n        \"description\": \"NonZeroBalance\",\n        \"id\": \"1\"\n      }\n    ],\n    \"transaction_data\": {\n        \"contract_address\": \"0xe826f870852d7eeeb79b2c030298f9b5daa8c8a3\",\n        \"method_id\":\"0x37c1d9ff\",\n        \"chain_id\": 80001,\n        \"network\": \"polygon-mumbai\"\n    }\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\"\n}\n</code></pre> </li> </ul>"},{"location":"credentials/1.0/refresh/","title":"Refresh","text":"<p>type: <code>/credentials/1.0/refresh</code></p> <p>The refresh message contains information about the credential that need to be refreshed.</p> <pre><code>{\n    \"id\": \"&lt;resource_id&gt;\",\n    \"reason\": \"&lt;reason&gt;\"\n}\n</code></pre> Field Description Type Required id Credential identifier string \u2705 reason Reason of refresh string \u2705 <ul> <li> <p>Example of credential refresh:</p> <pre><code>{\n  \"id\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"thid\": \"36f9e851-d713-4b50-8f8d-8a9382f138ca\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/refresh\",\n  \"body\": {\n    \"id\": \"c7b66a79-b930-49d1-9a97-66ab8fd792ac\",\n    \"reason\": \"expired\"\n  },\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> </li> </ul>"},{"location":"credentials/1.0/status-update/","title":"Status update","text":"<p>type: <code>/credentials/1.0/status-update</code></p> <p>The message contains information about the credential status.</p> <pre><code>{\n    \"id\": \"&lt;credential_id&gt;\",\n    \"reason\": \"&lt;text_to_display&gt;\"\n}\n</code></pre> Field Description Type Required id Credential ID string \u2705 reason Description of the status string \u2705 <ul> <li> <p>Example of status update message:</p> <pre><code>{\n  \"id\": \"f4b6f1a3-ebf4-49a7-8c2d-5d2649b1e65d\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/credentials/1.0/status\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n  \"body\": {\n        \"id\": \"118he3vAmZTWPaD7cyFYKz8ztjXceRGBPYgiuz8CQX\",\n        \"reason\": \"issuer key was revoked\"\n  }\n}\n</code></pre> </li> </ul>"},{"location":"discovery/overview/","title":"Overview","text":"<p>This protocol describes a mechanism to get the list of supported features by agent.</p>"},{"location":"discovery/2.0/discovery/","title":"Discovery Queries","text":"<p>type: <code>https://didcomm.org/discover-features/2.0/queries</code></p> <p>Message to discover supported features by agent. This message follows the DIDComm protocol. </p> <pre><code>{\n  \"type\": \"https://didcomm.org/discover-features/2.0/queries\",\n  \"id\": \"6f269888-0f93-4012-9f9d-e1da9896f261\",\n  \"body\": {\n    \"queries\": [\n      { \"feature-type\": \"accept\" }\n    ]\n  }\n}\n</code></pre> Field Description Type Required queries List of queries string \u2705 <ul> <li>Example of report problem message:</li> </ul> <pre><code>    {\n        \"id\": \"6f269888-0f93-4012-9f9d-e1da9896f261\",\n        \"thid\": \"6f269888-0f93-4012-9f9d-e1da9896f261\",\n        \"typ\": \"application/iden3comm-plain-json\",\n        \"type\": \"https://didcomm.org/discover-features/2.0/queries\",\n        \"body\": {\n          \"queries\": [\n            { \"feature-type\": \"accept\" }\n          ]\n        },\n        \"from\": \"did:polygonid:polygon:amoy:2qaPod1Qxo9UKTzR7K3Yo63gNRFHBm98bh1k1SEY6x\",\n        \"to\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\"\n    }\n</code></pre> <p>Now only one feature that is accepted as a query param is <code>accept</code>. Example of response</p> <pre><code>{\n    \"id\": \"6f269888-0f93-4012-9f9d-e1da9896f262\",\n    \"thid\": \"6f269888-0f93-4012-9f9d-e1da9896f261\",\n    \"type\": \"https://didcomm.org/discover-features/2.0/disclose\",\n    \"body\":{\n        \"disclosures\": [\n            {\n                \"feature-type\": \"accept\",\n                \"accept\": [\n                  \"iden3comm/v1;env=application/iden3-zkp-json;circuitId=authV2;alg=groth16\"\n                ]\n            }\n        ]\n    },\n  \"to\": \"did:polygonid:polygon:amoy:2qaPod1Qxo9UKTzR7K3Yo63gNRFHBm98bh1k1SEY6x\",\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\"\n}\n</code></pre> <p>See possible accept profiles here</p>"},{"location":"media-types/overview/","title":"Media types for iden3comm protocol","text":"<p>Media type of message defines the format of the envelope that is used in messaging. More read at DIDComm specification.</p>"},{"location":"media-types/overview/#supported-media-types-of-envelope","title":"Supported media types of envelope","text":"<ul> <li><code>application/iden3-zkp-json</code></li> <li><code>application/iden3comm-plain-json</code></li> <li><code>application/iden3comm-signed-json</code></li> <li><code>application/iden3comm-encrypted-json</code></li> </ul> <p>Each media type shows how envelope of the message is created and present in the payload as a <code>typ</code> field.</p>"},{"location":"media-types/overview/#when-to-use","title":"When to use:","text":"<ul> <li><code>application/iden3-zkp-json</code> corresponds to jwz envelope about which you can read more here. </li> <li><code>application/iden3comm-signed-json</code> corresponds to JWS envelope.  </li> <li><code>application/iden3comm-plain-json</code> represents simple json message with a property 'typ'.  </li> <li><code>application/iden3comm-encrypted-json</code> is a media type for encrypted envelops  </li> </ul> <p>In our protocol corresponding packers are implemented in golang and typescript.</p> <p>To determine which envelope to use, the sender can specify the <code>accept</code> header, allowing the responder to choose one of the supported profiles for authentication. Profile is a combination of media type and specific parameters for this media type.</p> <p>For ZKP profile <code>circuits</code> param could be added (optional):</p> <ul> <li>authV2</li> </ul> <p>For ZKP, Signed and Encrypted profiles <code>alg</code> param could be added (optional)</p> <p>ZKP profole params:</p> <ul> <li>groth16</li> </ul> <p>Signing algorithms:</p> <ul> <li>ES256K</li> <li>ES256K-R</li> </ul> <p>Encryption algorimts:</p> <ul> <li>anoncrypt ( ECDH-ES + AES key wrap; AES-CBC + HMAC-SHA512)</li> </ul> <p>Currently <code>accept</code> header is only applicable for authorization request message. Possible example: <pre><code>[\n  \"iden3comm/v1;env=application/iden3-zkp-json;circuitId=authV2;alg=groth16\",\n  \"iden3comm/v1;env=application/iden3comm-signed-json;alg=ES256K-R\"\n]\n</code></pre></p> <p>If <code>accept</code> header is omitted - default value is:</p> <pre><code>[\n  \"iden3comm/v1;env=application/iden3-zkp-json;circuitId=authV2;alg=groth16\"\n]\n</code></pre> <p>So default response will always use auth v2 circuit, groth 16 proof generator and jwz envelope.</p> <p>In case user initiates a communication, for example with embedded issuer and doesn't know what kind of profiles issuer agent accepts it should use discovery protocol.</p>"},{"location":"messages/overview/","title":"Overview","text":"<p>This protocol allows fetched messages from messages resources like notification servers for example.</p>"},{"location":"messages/1.0/fetch/","title":"Fetch","text":"<p>type: <code>/messages/1.0/fetch</code></p> <p>Message for fetch a message for known resource</p> <pre><code>{\n    \"id\": \"&lt;message_id&gt;\"\n}\n</code></pre> Field Description Type Required id The ID of the message to be received string \u2705 <ul> <li> <p>Example of fetch message:</p> <pre><code>{\n  \"id\": \"005a39c5-5d56-4286-9b48-f1d80772c3e7\",\n  \"thid\": \"005a39c5-5d56-4286-9b48-f1d80772c3e7\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/messages/1.0/fetch\"\n  \"body\": {\n    \"id\": \"ceWdRd2F6WnAyVuFQRFjK3WUXq2LorSPyG9LJ\"\n  },\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\"\n}\n</code></pre> </li> </ul>"},{"location":"proofs/overview/","title":"Overview","text":"<p>This protocol bears a strong resemblance to the authorization protocol, with the primary distinction being its exclusive use for transmitting proofs from Alice to Bob. It is NOT recommended to employ this protocol for the authorization flow. In certain scenarios, participants may need to interact with a smart contract to verify zkproof on-chain and facilitate other communications. This protocol encompasses all the necessary information for establishing communication with smart contracts and Exchanging of proofs.</p>"},{"location":"proofs/1.0/contract-invoke-request/","title":"Contract invoke request","text":"<p>type: <code>/proofs/1.0/contract-invoke-request</code></p> <p>This request allow users to verify zk proof on chain.</p> <pre><code>{\n    \"reason\": \"&lt;reason_for_the_request&gt;\",\n    \"did_doc\": \"&lt;did_doc&gt;\",\n    \"scope\": \"[&lt;list_of_asked_information_from_user&gt;]\",\n    \"transaction_data\": \"{&lt;information_about_smart_contract&gt;}\"\n}\n</code></pre> Field Description Type Required reason Reason for the request string \u274c did_doc Resource did doc JSON \u274c scope.id Unique request id uint64 \u2705 scope.circuitId Information that circuit should use user for generating zk proof string \u2705 scope.optional ? boolean \u274c scope.params circuit specific params map) \u274c scope.query Information about what information the user must prove with ZKPproof map \u2705 transaction_data.contract_address Smart contract address string \u2705 transaction_data.method_id Smart contract method (hash from sc method name) string \u2705 transaction_data.chain_id Chain identification string \u2705 transaction_data.network Chain network string \u2705 <ul> <li> <p>Example of contract invoke:</p> <pre><code>{\n  \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/proofs/1.0/contract-invoke-request\",\n  \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n  \"body\": {\n    \"scope\": [\n      {\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQuerySigV2\",\n        \"query\": {\n          \"allowedIssuers\": [\"*\"],\n          \"context\": \"https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\",\n          \"type\": \"KYCAgeCredential\",\n          \"credentialSubject\": {\n            \"birthday\": {\n              \"$lt\": 2000101\n            }\n          }\n        }\n      }\n    ],\n        \"transaction_data\": {\n            \"contract_address\": \"0xe826f870852d7eeeb79b2c030298f9b5daa8c8a3\",\n            \"method_id\":\"b68967e2\",\n            \"chain_id\": 80001,\n            \"network\": \"polygon-mumbai\"\n        }\n  }\n}\n</code></pre> </li> </ul>"},{"location":"proofs/1.0/contract-invoke-response/","title":"Contract invoke response","text":"<p>type: <code>/proofs/1.0/contract-invoke-response</code></p> <p>Response to contract invoke request with a zero-knowledge proof that could be sent or not. In case proof response has been sent, then txHash property MUST be included to scope object of the generated proof. </p> <pre><code>{\n    \"did_doc\": \"&lt;did_doc&gt;\",\n    \"scope\": [\"&lt;generated zero knowledge proofs with or without txHash&gt;\"],\n    \"transaction_data\": \"{&lt;information_about_smart_contract&gt;}\"\n}\n</code></pre> Field Description Type Required did_doc Resource did doc JSON \u274c scope List of objects with zkpoorf and public inputs list of objects \u2705 scope.id Unique id to present unique authorization request uint32 \u2705 scope.circuitId Information that circuit was used for generating zk proof string \u2705 scope.vp Information that user wants to disclosure JSON \u274c scope.txHash transaction hash if proof is sent to chain JSON \u274c scope[i].proof zero-knowledge proof JSON \u2705 scope[i].pub_signals A list of public inputs was utilized in the generation of the Zero-Knowledge Proof list of strings \u2705 transaction_data.contract_address Smart contract address string \u2705 transaction_data.method_id Smart contract method (function signature string \u2705 transaction_data.chain_id Chain identification string \u2705 transaction_data.network Chain network string \u2705 <ul> <li> <p>Example of contract invoke response:</p> <pre><code>{\n  \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/proofs/1.0/contract-invoke-response\",\n  \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n  \"from\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\",\n  \"body\": {\n      \"transaction_data\": {\n            \"contract_address\": \"0x13d67dc5f3ef3f5327b60b824d66f27c9b03316862ec27a330ccab5ea3b28cc1\",\n            \"method_id\":\"b68967e2\",\n            \"chain_id\": 80002,\n            \"network\": \"polygon-amoy\"\n      },\n      \"scope\": [\n       {\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQuerySigV2\",\n        \"txHash\": \"0xe826f870852d7eeeb79b2c030298f9b5daa8c8a3\",\n        \"proof\": {\n          \"pi_a\": [\n            \"9742806134969392226546322490560630802447930806537100408086160321763928272376\",\n            \"21455791203277003434494375277451189817937636213176444019767120099596514163982\",\n            \"1\"\n          ],\n          \"pi_b\": [\n            [\n              \"10380825203862480352812509276126714433521593951138343399902602814224203230644\",\n              \"3258713202006941217475014546591342349864153477480289203741647764981122849969\"\n            ],\n            [\n              \"1822645146824926970539316997069683858010941097218414131904374790154170166572\",\n              \"10353710770765315368364178270577963995559055291780726291909607243297495512681\"\n            ],\n            [\n              \"1\",\n              \"0\"\n            ]\n          ],\n          \"pi_c\": [\n            \"9484567403290042082168690530225028055268796074940883562365588128103915644358\",\n            \"6661326208907807355087503512595101570698136414120018064634575604679380099060\",\n            \"1\"\n          ],\n          \"protocol\": \"groth16\"\n        },\n        \"pub_signals\": [\n          \"379949150130214723420589610911161895495647789006649785264738141299135414272\",\n          \"18656147546666944484453899241916469544090258810192803949522794490493271005313\",\n          \"1\",\n          \"17339270624307006522829587570402128825147845744601780689258033623056405933706\",\n          \"26599707002460144379092755370384635496563807452878989192352627271768342528\",\n          \"17339270624307006522829587570402128825147845744601780689258033623056405933706\",\n          \"1642074362\",\n          \"106590880073303418818490710639556704462\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\"\n        ]\n      }]\n  }\n}\n</code></pre> </li> </ul>"},{"location":"proposals/overview/","title":"Overview","text":"<p>Here, custom standard drafts or proposal by iden3 is described.</p>"},{"location":"proposals/jwz/overview/","title":"JSON Web Zero-knowledge","text":""},{"location":"proposals/jwz/overview/#summary","title":"Summary","text":"<p>JSON Web Zero-knowledge (JWZ) is an open standard for representing messages proven by zero-knowledge technology.</p> <p>This specification of the JSON Web Zero-knowledge standard that relay on a draft of the JWM standard and JWT (RFC7519) standards.</p> <p>While having a lot in common, JWZ  has different intents from JWT and JWM. A JWM is about a sender creating a message composed of attributes, where the message is destined for a recipient or recipients. Whereas a JWT is about an issuer expressing claims about a subject to an audience. See the section in Section 2.1 of\u00a0[JWM]. JWZ is about proving the message that can be represented as JWT claims and JWM attributes set.</p> <p>While a JWM leverages JSON Web Signature (JWS) and or JSON Web Encryption (JWE) to achieve digital signing, integrity protection, and confidentiality JWZ utilizes zero-knowledge technologies.</p> <p>Its main goal is to provide a new way of interaction between users by providing data integrity of the message, anonymity of sender public keys, and providing helpful metadata among the message.</p>"},{"location":"proposals/jwz/overview/#definition","title":"Definition","text":"<p>JWZ consists of three parts separated by dots (.), which are:</p> <ul> <li>Header</li> <li>Payload message</li> <li> <p>Zero-knowledge proof</p> </li> <li> <p>Example of compacted jwz token:</p> <p><pre><code>eyJhbGciOiJncm90aDE2IiwiY2lyY3VpdElkIjoiYXV0aFYyIiwiY3JpdCI6WyJjaXJjdWl0SWQiXSwidHlwIjoiYXBwbGljYXRpb24vaWRlbjMtemtwLWpzb24ifQ.eyJpZCI6ImM3NTUzZWFhLWFlY2QtNGRjNi1iMDU3LWExY2IyOWNhZGJmYiIsInR5cCI6ImFwcGxpY2F0aW9uL2lkZW4zLXprcC1qc29uIiwidHlwZSI6Imh0dHBzOi8vaWRlbjMtY29tbXVuaWNhdGlvbi5pby9hdXRob3JpemF0aW9uLzEuMC9yZXNwb25zZSIsInRoaWQiOiI0MGNjMDllYS04NWRhLTQ4Y2UtOTE4OC1jNDQwZDM1MWVlNTMiLCJib2R5Ijp7ImRpZF9kb2MiOnsiY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvbnMvZGlkL3YxIl0sImlkIjoiZGlkOnBvbHlnb25pZDpwb2x5Z29uOmFtb3k6MnFhUG9kMVF4bzlVS1R6UjdLM1lvNjNnTlJGSEJtOThiaDFrMVNFWTZ4Iiwic2VydmljZSI6W3siaWQiOiJkaWQ6cG9seWdvbmlkOnBvbHlnb246YW1veToycWFQb2QxUXhvOVVLVHpSN0szWW82M2dOUkZIQm05OGJoMWsxU0VZNngjcHVzaCIsInR5cGUiOiJwdXNoLW5vdGlmaWNhdGlvbiIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vcHVzaC1zdGFnaW5nLnBvbHlnb25pZC5jb20vYXBpL3YxIiwibWV0YWRhdGEiOnsiZGV2aWNlcyI6W3siY2lwaGVydGV4dCI6InZWTGpGWFRGVldEbE5DUStFV0dhNlRiRFNEUWx5UDVrSXpwSWFNc0d3UlRWRy93YmExN2ExZnNNWFRtQjhFbnZpWThKUmZWQjF6MDN2dyszVzhicFJnWEdNeXJONXpOekdOSVh0WjNTUVdmb3VUVkZhV2NFWTVSWW1PV05JcW5SeDdTU0lDQUsxZTlSbzdEVTNOdHJJUldJWkFqWVBmaG5zOVNiU2pGYnpmWmhvckJuSHFzK3dlRWxSRUQrZUc4alpOc0NIYWRzY3Ewcm4zSGFIZkJrTi9NYnc3allSaW9vY2xmREorSDIwaUZKODVWWVRJSTdhb3RaMWxkS3hTbDhvb2NwTXJVeTJRaktENVRXVTliZ0tZOE15YWhpQjJUN0p5Qk1zWDgxQzlZbW1sbTJFTHl2aWh0cmMwTDhKQlJFOUhMdERLWnpwK2pwbDdMK205WE1ka3AxejVMKzVYNG9lTmdHOXBCODFzTVJhTzROM1RTVU1XY0dmejhQdDRHZktDUFdFaThmUWdmeGU1UUFoQUcra3ZVSzRDbVBsdk9hUExURTVJM3JpWnRZcklJdDh0eDVLNnkrUmJyaThXV1h0M2h3dU10MjVuZk9qdnpNcjVxSE5TRTZSc2xPczdpNGNpMHhlLy9mbEdSck1qZEJ0bEhEZExwT3ptdTZlSlA5WHJtVzcwL2haVFBveXhRc1BFTUFrNVl0L1hMSm9VYmJQcXVtYmZ3MURhbFRHaFdla3A3Ri9mUDZ6Kzd1Tyt2b2piUzZnemVDUEhyUHkrTkJydHJsSmRnQi8zVEEyclJ1KytlaFpWMDh0WndWK01qNGRkVjZmcnd3UnVKQTNXWm83RWhRV2ppNEJYeTNudzE0bVNZTEVwb01qWTdwZnJSNHMrTW9qakoxRE9vPSIsImFsZyI6IlJTQS1PQUVQLTUxMiJ9XX19XX0sIm1lc3NhZ2UiOm51bGwsInNjb3BlIjpbeyJwcm9vZiI6eyJwaV9hIjpbIjE1MzYwNzE5OTc0MzY0NzMzNzIzNTMyMjI2NTM1MTAyNjY1NzQ1NjEyMDY4Nzg4NzczMjk2MzYxMDc0NjM1MzA2NTc1NDUyMTM3ODA1IiwiMTU2Mzg5MzI4MDc2Nzc5NjA5NzAzMTgzNDI0NTE0NTkwNDcxMzI4ODI0NjgyNTQ4NTU2MTU0NzUwNDcwNjg2MjQxMzY3ODU2ODUyODQiLCIxIl0sInBpX2IiOltbIjEyMjQzODg4NjM2MTY1MzQzMDA0NjM1NjE3ODA0MDY5NTk1ODI1MjExMDUyMTgwOTY3MDcwNDc1MDY3NzE4OTc3MjUyMzE5NTEwNDE2IiwiNDU0OTU0MDc2OTQ3NzExMDA2MzY0MDk1OTIyNTExMTQ0MjQ5NDg3MTQ5OTE2Njc3NDE5Mzg0NzkxNjg4MjAxNzUwMDI1ODg4NTIxOSJdLFsiMjIwMDQ0ODAxNTAwOTcwNzg0NjM0NTMxODI5NzUzODE3ODkyMTY3ODEzODUzNzI2MjA0MjY0MjIzNjY0NjEzNzQ5ODQ3MjQyMjEyMCIsIjcyNTg5ODk5MTUwMzg2MzE3Mzk1NzIwNjkyMzU0Mjg2ODcyMjQwNzkwODMwMzk5NTQzMTgxNzk0NzkyNzc3MDYzNDg4MjAzMTI3NTYiXSxbIjEiLCIwIl1dLCJwaV9jIjpbIjQ5NTU3NTc3MDEzNjI3MzMyMDgzNjY1MDQ2NTU5NDI2NzI5NDc5NDI4NjYxNjEyNTQ5NzgwMjE5OTA5NjM5Nzc4MzQ4MDU0MDU5NzEiLCIxOTQ3OTA5MzE1MzYxNTIxNDI5MTAyMjM4NTk2Mjg0MjQ3NDcwOTEzNTg5NDcxMDU3NjA1NDE1MjI0MTUzMzU4NzQyNDEwNDYwOTkzMiIsIjEiXSwicHJvdG9jb2wiOiJncm90aDE2IiwiY3VydmUiOiJibjEyOCJ9LCJwdWJfc2lnbmFscyI6WyIxIiwiMjQyNDI2NDIxMjgzNjA2MTMyNTQ4NDQwMDM1NTk3Nzg0NDAwNzU5NDEyMjU0MTY4ODUxMDMwMzYwMDAxNTExNDQ0MTk2OTMzMTQiLCIxNzAxNjE3MjUyODk5MDc2MzkzNzE0MjQyODE5MjU0MzY4Mzg0NTYzNzYzNjY4NTE5OTA0ODIyOTY4MTc2MDI5MjYxMTYwMTA2MDQ0OSIsIjAiLCIwIiwiMCIsIjEiLCIxIiwiMjU4MjczNDkwNzI2MDkzMTY5NDczOTY5Nzk4Mjg1MTg3ODk3MDA5MTIzNTE2MjM1MDYwODA0ODkzODk4OTQwNzUyNjg2NjYxMTQiLCIxIiwiMTA4NTM1NzM1ODU2MDA2NjcwODQ0ODQ2MjQ2NTkwNjg5MzQ3Mzg0ODAwOTkxMjgyNzIwMjg2MjA0MjI3NjQzODg1OTU1MTgzNzA3MzAiLCIxNzEyMzI3NTM1IiwiMTA2MjI4MTM4NTc4MTc3MzcxNTU2NDEyNzM0NzQwMjU5NDA1MDczIiwiODI2MjE1ODQ1MTY0NTQ2NjExNjgyNTYwMTg4OTUwMzAxMTkwODYwMTE1NTE3NTI3Mzk2ODY4NjkwMDk2MjI1MTk0MzQ5NjIyNzAzOSIsIjAiLCIxIiwiMSIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjEiLCIyNTgyNzM0OTA3MjYwOTMxNjk0NzM5Njk3OTgyODUxODc4OTcwMDkxMjM1MTYyMzUwNjA4MDQ4OTM4OTg5NDA3NTI2ODY2NjExNCIsIjAiXSwiaWQiOjEsImNpcmN1aXRJZCI6ImNyZWRlbnRpYWxBdG9taWNRdWVyeVYzLWJldGEuMSJ9XX0sImZyb20iOiJkaWQ6cG9seWdvbmlkOnBvbHlnb246YW1veToycWFQb2QxUXhvOVVLVHpSN0szWW82M2dOUkZIQm05OGJoMWsxU0VZNngiLCJ0byI6ImRpZDpwb2x5Z29uaWQ6cG9seWdvbjphbW95OjJxVjlRWGRoWFhtTjVzS2pOMVl1ZU1qeGdSYm5KY0VHSzJrR3B2azNjcSJ9.eyJwcm9vZiI6eyJwaV9hIjpbIjE1MjgzNTY1OTE3NzI5NTE2ODAwMjY5ODM5ODQ3NTk0MDUyOTY5NjIzMDM0NjU2NzM3MzExNjQxNTM2NzM0NzQzOTE4ODYxNTI2MjM4IiwiMTU3OTcyNDMzMzkyNTY3NjUyOTMyNjg2NjE1MDg1Mjg0NTA4MjY4MzIyOTQ2NzUwNDU1ODkzNjcxNjcwMDg1NjU4ODU5MjIyMzc4MCIsIjEiXSwicGlfYiI6W1siMTg3ODU4NjY0MDQ3MjU5MTA3NDc1NTI0MjgyMzU5ODIyNzAzNTQzODgxMjIyODMwNjI4ODg0MDg2ODQ2NTYxMDY1MzYyMTUyODkzOCIsIjMyMTQ0MTcxNTEwMzcxNzg3ODAzMTc1MDQ2NjMwNDI0NjM2MjI3NzczODYzODA0MjY1NjQyMjkxMTkxNjg0MzE2MzkwNzUyNDYwMTciXSxbIjEwNTQ2NDI4NTI2OTQyNTI1NTI2ODA2ODkyMDkyMDcxMTI2MDc5MjY0MjA4MDkyMzQ3NTE3MDQwNDY2MDU5NTczMjc0MTMzMzI1MCIsIjIwNDE1NjQ0MTMxMzczNDE3ODYwOTQ5MTU0NzcxNTAwMzMwMjc0ODYzMTQzMDIzNzI2MzgwNjgyNTQ5MTM4ODY4MjgwNzEyOTc3MzM2Il0sWyIxIiwiMCJdXSwicGlfYyI6WyI2ODUwNjU2MzQ1MzI0NDA5NTAxODE3NzM1NDgzNzcwMTcxMzg5MjAxNzgwODEzNjM1ODQ5MzYzOTk0NjE0MzE3NTQ5OTU2Mzc4MDc5IiwiNDIwNDc3Njc4MzQyNzQxODEzMDg0MjYxOTk1Nzk5NTg5Njk5MTY5NTE5MzkwNDkxNzY0NjU2NzE3NjU4Njk2NDkzMjU0OTkwOTAxMSIsIjEiXSwicHJvdG9jb2wiOiJncm90aDE2IiwiY3VydmUiOiJibjEyOCJ9LCJwdWJfc2lnbmFscyI6WyIyNDI0MjY0MjEyODM2MDYxMzI1NDg0NDAwMzU1OTc3ODQ0MDA3NTk0MTIyNTQxNjg4NTEwMzAzNjAwMDE1MTE0NDQxOTY5MzMxNCIsIjExMjA4NDE2ODYzNjgwNTgxMTk5MDg0ODg4MzI0MzExNTI5MzkwNTg4NDc1MjE3MDQyMjY3OTI3NzkxMjI5MTU1NDQ2MTU1MjMxMTA4IiwiMTc4NDk5ODE3MjA2MzQyMTI4MDI2NjQxODk5Mjk2NzExNDA3NjI1NTc0ODMyMzY3MDgwOTc3MjM4ODQxNzI2NDExMjQ2OTEyMjIyOTgiXX0\n</code></pre> Link to  web parser.</p> </li> </ul> <p>The first part - headers:</p> <ul> <li>base 64 encoded headers</li> </ul> <p><code>eyJhbGciOiJncm90aDE2IiwiY2lyY3VpdElkIjoiYXV0aFYyIiwiY3JpdCI6WyJjaXJjdWl0SWQiXSwidHlwIjoiYXBwbGljYXRpb24vaWRlbjMtemtwLWpzb24ifQ</code></p> <pre><code>{\n    \"alg\": \"groth16\",\n    \"circuitId\": \"authV2\",\n    \"crit\": [\n        \"circuitId\"\n    ],\n    \"typ\": \"application/iden3-zkp-json\"\n}\n</code></pre> <p>alg - is a zero-knowledge algorithm that is used for proof generation.</p> <p>circuitId - is a circuit that is used for proof generation. For authentication - auth circuit must be used.</p> <p>crit - describes the list of header keys that the verifier must support.</p> <p>typ - is the media type of the message. In our case, it\u2019s the protocol type of packed message application/iden3-zkp-json</p> <p>The second part - message:</p> <pre><code>eyJpZCI6ImM3NTUzZWFhLWFlY2QtNGRjNi1iMDU3LWExY2IyOWNhZGJmYiIsInR5cCI6ImFwcGxpY2F0aW9uL2lkZW4zLXprcC1qc29uIiwidHlwZSI6Imh0dHBzOi8vaWRlbjMtY29tbXVuaWNhdGlvbi5pby9hdXRob3JpemF0aW9uLzEuMC9yZXNwb25zZSIsInRoaWQiOiI0MGNjMDllYS04NWRhLTQ4Y2UtOTE4OC1jNDQwZDM1MWVlNTMiLCJib2R5Ijp7ImRpZF9kb2MiOnsiY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvbnMvZGlkL3YxIl0sImlkIjoiZGlkOnBvbHlnb25pZDpwb2x5Z29uOmFtb3k6MnFhUG9kMVF4bzlVS1R6UjdLM1lvNjNnTlJGSEJtOThiaDFrMVNFWTZ4Iiwic2VydmljZSI6W3siaWQiOiJkaWQ6cG9seWdvbmlkOnBvbHlnb246YW1veToycWFQb2QxUXhvOVVLVHpSN0szWW82M2dOUkZIQm05OGJoMWsxU0VZNngjcHVzaCIsInR5cGUiOiJwdXNoLW5vdGlmaWNhdGlvbiIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vcHVzaC1zdGFnaW5nLnBvbHlnb25pZC5jb20vYXBpL3YxIiwibWV0YWRhdGEiOnsiZGV2aWNlcyI6W3siY2lwaGVydGV4dCI6InZWTGpGWFRGVldEbE5DUStFV0dhNlRiRFNEUWx5UDVrSXpwSWFNc0d3UlRWRy93YmExN2ExZnNNWFRtQjhFbnZpWThKUmZWQjF6MDN2dyszVzhicFJnWEdNeXJONXpOekdOSVh0WjNTUVdmb3VUVkZhV2NFWTVSWW1PV05JcW5SeDdTU0lDQUsxZTlSbzdEVTNOdHJJUldJWkFqWVBmaG5zOVNiU2pGYnpmWmhvckJuSHFzK3dlRWxSRUQrZUc4alpOc0NIYWRzY3Ewcm4zSGFIZkJrTi9NYnc3allSaW9vY2xmREorSDIwaUZKODVWWVRJSTdhb3RaMWxkS3hTbDhvb2NwTXJVeTJRaktENVRXVTliZ0tZOE15YWhpQjJUN0p5Qk1zWDgxQzlZbW1sbTJFTHl2aWh0cmMwTDhKQlJFOUhMdERLWnpwK2pwbDdMK205WE1ka3AxejVMKzVYNG9lTmdHOXBCODFzTVJhTzROM1RTVU1XY0dmejhQdDRHZktDUFdFaThmUWdmeGU1UUFoQUcra3ZVSzRDbVBsdk9hUExURTVJM3JpWnRZcklJdDh0eDVLNnkrUmJyaThXV1h0M2h3dU10MjVuZk9qdnpNcjVxSE5TRTZSc2xPczdpNGNpMHhlLy9mbEdSck1qZEJ0bEhEZExwT3ptdTZlSlA5WHJtVzcwL2haVFBveXhRc1BFTUFrNVl0L1hMSm9VYmJQcXVtYmZ3MURhbFRHaFdla3A3Ri9mUDZ6Kzd1Tyt2b2piUzZnemVDUEhyUHkrTkJydHJsSmRnQi8zVEEyclJ1KytlaFpWMDh0WndWK01qNGRkVjZmcnd3UnVKQTNXWm83RWhRV2ppNEJYeTNudzE0bVNZTEVwb01qWTdwZnJSNHMrTW9qakoxRE9vPSIsImFsZyI6IlJTQS1PQUVQLTUxMiJ9XX19XX0sIm1lc3NhZ2UiOm51bGwsInNjb3BlIjpbeyJwcm9vZiI6eyJwaV9hIjpbIjE1MzYwNzE5OTc0MzY0NzMzNzIzNTMyMjI2NTM1MTAyNjY1NzQ1NjEyMDY4Nzg4NzczMjk2MzYxMDc0NjM1MzA2NTc1NDUyMTM3ODA1IiwiMTU2Mzg5MzI4MDc2Nzc5NjA5NzAzMTgzNDI0NTE0NTkwNDcxMzI4ODI0NjgyNTQ4NTU2MTU0NzUwNDcwNjg2MjQxMzY3ODU2ODUyODQiLCIxIl0sInBpX2IiOltbIjEyMjQzODg4NjM2MTY1MzQzMDA0NjM1NjE3ODA0MDY5NTk1ODI1MjExMDUyMTgwOTY3MDcwNDc1MDY3NzE4OTc3MjUyMzE5NTEwNDE2IiwiNDU0OTU0MDc2OTQ3NzExMDA2MzY0MDk1OTIyNTExMTQ0MjQ5NDg3MTQ5OTE2Njc3NDE5Mzg0NzkxNjg4MjAxNzUwMDI1ODg4NTIxOSJdLFsiMjIwMDQ0ODAxNTAwOTcwNzg0NjM0NTMxODI5NzUzODE3ODkyMTY3ODEzODUzNzI2MjA0MjY0MjIzNjY0NjEzNzQ5ODQ3MjQyMjEyMCIsIjcyNTg5ODk5MTUwMzg2MzE3Mzk1NzIwNjkyMzU0Mjg2ODcyMjQwNzkwODMwMzk5NTQzMTgxNzk0NzkyNzc3MDYzNDg4MjAzMTI3NTYiXSxbIjEiLCIwIl1dLCJwaV9jIjpbIjQ5NTU3NTc3MDEzNjI3MzMyMDgzNjY1MDQ2NTU5NDI2NzI5NDc5NDI4NjYxNjEyNTQ5NzgwMjE5OTA5NjM5Nzc4MzQ4MDU0MDU5NzEiLCIxOTQ3OTA5MzE1MzYxNTIxNDI5MTAyMjM4NTk2Mjg0MjQ3NDcwOTEzNTg5NDcxMDU3NjA1NDE1MjI0MTUzMzU4NzQyNDEwNDYwOTkzMiIsIjEiXSwicHJvdG9jb2wiOiJncm90aDE2IiwiY3VydmUiOiJibjEyOCJ9LCJwdWJfc2lnbmFscyI6WyIxIiwiMjQyNDI2NDIxMjgzNjA2MTMyNTQ4NDQwMDM1NTk3Nzg0NDAwNzU5NDEyMjU0MTY4ODUxMDMwMzYwMDAxNTExNDQ0MTk2OTMzMTQiLCIxNzAxNjE3MjUyODk5MDc2MzkzNzE0MjQyODE5MjU0MzY4Mzg0NTYzNzYzNjY4NTE5OTA0ODIyOTY4MTc2MDI5MjYxMTYwMTA2MDQ0OSIsIjAiLCIwIiwiMCIsIjEiLCIxIiwiMjU4MjczNDkwNzI2MDkzMTY5NDczOTY5Nzk4Mjg1MTg3ODk3MDA5MTIzNTE2MjM1MDYwODA0ODkzODk4OTQwNzUyNjg2NjYxMTQiLCIxIiwiMTA4NTM1NzM1ODU2MDA2NjcwODQ0ODQ2MjQ2NTkwNjg5MzQ3Mzg0ODAwOTkxMjgyNzIwMjg2MjA0MjI3NjQzODg1OTU1MTgzNzA3MzAiLCIxNzEyMzI3NTM1IiwiMTA2MjI4MTM4NTc4MTc3MzcxNTU2NDEyNzM0NzQwMjU5NDA1MDczIiwiODI2MjE1ODQ1MTY0NTQ2NjExNjgyNTYwMTg4OTUwMzAxMTkwODYwMTE1NTE3NTI3Mzk2ODY4NjkwMDk2MjI1MTk0MzQ5NjIyNzAzOSIsIjAiLCIxIiwiMSIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjEiLCIyNTgyNzM0OTA3MjYwOTMxNjk0NzM5Njk3OTgyODUxODc4OTcwMDkxMjM1MTYyMzUwNjA4MDQ4OTM4OTg5NDA3NTI2ODY2NjExNCIsIjAiXSwiaWQiOjEsImNpcmN1aXRJZCI6ImNyZWRlbnRpYWxBdG9taWNRdWVyeVYzLWJldGEuMSJ9XX0sImZyb20iOiJkaWQ6cG9seWdvbmlkOnBvbHlnb246YW1veToycWFQb2QxUXhvOVVLVHpSN0szWW82M2dOUkZIQm05OGJoMWsxU0VZNngiLCJ0byI6ImRpZDpwb2x5Z29uaWQ6cG9seWdvbjphbW95OjJxVjlRWGRoWFhtTjVzS2pOMVl1ZU1qeGdSYm5KY0VHSzJrR3B2azNjcSJ9\n</code></pre> <ul> <li> <p>In current example is an authorization response iden3comm message</p> <pre><code>{\n  \"id\": \"c7553eaa-aecd-4dc6-b057-a1cb29cadbfb\",\n  \"typ\": \"application/iden3-zkp-json\",\n  \"type\": \"https://iden3-communication.io/authorization/1.0/response\",\n  \"thid\": \"40cc09ea-85da-48ce-9188-c440d351ee53\",\n  \"body\": {\n    \"did_doc\": {\n      \"context\": [\n        \"https://www.w3.org/ns/did/v1\"\n      ],\n      \"id\": \"did:polygonid:polygon:amoy:2qaPod1Qxo9UKTzR7K3Yo63gNRFHBm98bh1k1SEY6x\",\n      \"service\": [\n        {\n          \"id\": \"did:polygonid:polygon:amoy:2qaPod1Qxo9UKTzR7K3Yo63gNRFHBm98bh1k1SEY6x#push\",\n          \"type\": \"push-notification\",\n          \"serviceEndpoint\": \"https://push-staging.polygonid.com/api/v1\",\n          \"metadata\": {\n            \"devices\": [\n              {\n                \"ciphertext\": \"vVLjFXTFVWDlNCQ+EWGa6TbDSDQlyP5kIzpIaMsGwRTVG/wba17a1fsMXTmB8EnviY8JRfVB1z03vw+3W8bpRgXGMyrN5zNzGNIXtZ3SQWfouTVFaWcEY5RYmOWNIqnRx7SSICAK1e9Ro7DU3NtrIRWIZAjYPfhns9SbSjFbzfZhorBnHqs+weElRED+eG8jZNsCHadscq0rn3HaHfBkN/Mbw7jYRiooclfDJ+H20iFJ85VYTII7aotZ1ldKxSl8oocpMrUy2QjKD5TWU9bgKY8MyahiB2T7JyBMsX81C9Ymmlm2ELyvihtrc0L8JBRE9HLtDKZzp+jpl7L+m9XMdkp1z5L+5X4oeNgG9pB81sMRaO4N3TSUMWcGfz8Pt4GfKCPWEi8fQgfxe5QAhAG+kvUK4CmPlvOaPLTE5I3riZtYrIIt8tx5K6y+Rbri8WWXt3hwuMt25nfOjvzMr5qHNSE6RslOs7i4ci0xe//flGRrMjdBtlHDdLpOzmu6eJP9XrmW70/hZTPoyxQsPEMAk5Yt/XLJoUbbPqumbfw1DalTGhWekp7F/fP6z+7uO+vojbS6gzeCPHrPy+NBrtrlJdgB/3TA2rRu++ehZV08tZwV+Mj4ddV6frwwRuJA3WZo7EhQWji4BXy3nw14mSYLEpoMjY7pfrR4s+MojjJ1DOo=\",\n                \"alg\": \"RSA-OAEP-512\"\n              }\n            ]\n          }\n        }\n      ]\n    },\n    \"message\": null,\n    \"scope\": [\n      {\n        \"proof\": {\n          \"pi_a\": [\n            \"15360719974364733723532226535102665745612068788773296361074635306575452137805\",\n            \"15638932807677960970318342451459047132882468254855615475047068624136785685284\",\n            \"1\"\n          ],\n          \"pi_b\": [\n            [\n              \"12243888636165343004635617804069595825211052180967070475067718977252319510416\",\n              \"4549540769477110063640959225111442494871499166774193847916882017500258885219\"\n            ],\n            [\n              \"2200448015009707846345318297538178921678138537262042642236646137498472422120\",\n              \"7258989915038631739572069235428687224079083039954318179479277706348820312756\"\n            ],\n            [\n              \"1\",\n              \"0\"\n            ]\n          ],\n          \"pi_c\": [\n            \"4955757701362733208366504655942672947942866161254978021990963977834805405971\",\n            \"19479093153615214291022385962842474709135894710576054152241533587424104609932\",\n            \"1\"\n          ],\n          \"protocol\": \"groth16\",\n          \"curve\": \"bn128\"\n        },\n        \"pub_signals\": [\n          \"1\",\n          \"24242642128360613254844003559778440075941225416885103036000151144419693314\",\n          \"17016172528990763937142428192543683845637636685199048229681760292611601060449\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"1\",\n          \"1\",\n          \"25827349072609316947396979828518789700912351623506080489389894075268666114\",\n          \"1\",\n          \"10853573585600667084484624659068934738480099128272028620422764388595518370730\",\n          \"1712327535\",\n          \"106228138578177371556412734740259405073\",\n          \"8262158451645466116825601889503011908601155175273968686900962251943496227039\",\n          \"0\",\n          \"1\",\n          \"1\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"0\",\n          \"1\",\n          \"25827349072609316947396979828518789700912351623506080489389894075268666114\",\n          \"0\"\n        ],\n        \"id\": 1,\n        \"circuitId\": \"credentialAtomicQueryV3-beta.1\"\n      }\n    ]\n  },\n  \"from\": \"did:polygonid:polygon:amoy:2qaPod1Qxo9UKTzR7K3Yo63gNRFHBm98bh1k1SEY6x\",\n  \"to\": \"did:polygonid:polygon:amoy:2qV9QXdhXXmN5sKjN1YueMjxgRbnJcEGK2kGpvk3cq\"\n}\n</code></pre> </li> </ul> <p>from  -  sender identity. To is a verifier identityifer.</p> <p>id - unique message id</p> <p>thid - id of message thread (must be the same as in the request)</p> <p>message - signed message</p> <p>scope - array of generated claim proofs</p> <p>The third part - proof:</p> <pre><code>eyJwcm9vZiI6eyJwaV9hIjpbIjE1MjgzNTY1OTE3NzI5NTE2ODAwMjY5ODM5ODQ3NTk0MDUyOTY5NjIzMDM0NjU2NzM3MzExNjQxNTM2NzM0NzQzOTE4ODYxNTI2MjM4IiwiMTU3OTcyNDMzMzkyNTY3NjUyOTMyNjg2NjE1MDg1Mjg0NTA4MjY4MzIyOTQ2NzUwNDU1ODkzNjcxNjcwMDg1NjU4ODU5MjIyMzc4MCIsIjEiXSwicGlfYiI6W1siMTg3ODU4NjY0MDQ3MjU5MTA3NDc1NTI0MjgyMzU5ODIyNzAzNTQzODgxMjIyODMwNjI4ODg0MDg2ODQ2NTYxMDY1MzYyMTUyODkzOCIsIjMyMTQ0MTcxNTEwMzcxNzg3ODAzMTc1MDQ2NjMwNDI0NjM2MjI3NzczODYzODA0MjY1NjQyMjkxMTkxNjg0MzE2MzkwNzUyNDYwMTciXSxbIjEwNTQ2NDI4NTI2OTQyNTI1NTI2ODA2ODkyMDkyMDcxMTI2MDc5MjY0MjA4MDkyMzQ3NTE3MDQwNDY2MDU5NTczMjc0MTMzMzI1MCIsIjIwNDE1NjQ0MTMxMzczNDE3ODYwOTQ5MTU0NzcxNTAwMzMwMjc0ODYzMTQzMDIzNzI2MzgwNjgyNTQ5MTM4ODY4MjgwNzEyOTc3MzM2Il0sWyIxIiwiMCJdXSwicGlfYyI6WyI2ODUwNjU2MzQ1MzI0NDA5NTAxODE3NzM1NDgzNzcwMTcxMzg5MjAxNzgwODEzNjM1ODQ5MzYzOTk0NjE0MzE3NTQ5OTU2Mzc4MDc5IiwiNDIwNDc3Njc4MzQyNzQxODEzMDg0MjYxOTk1Nzk5NTg5Njk5MTY5NTE5MzkwNDkxNzY0NjU2NzE3NjU4Njk2NDkzMjU0OTkwOTAxMSIsIjEiXSwicHJvdG9jb2wiOiJncm90aDE2IiwiY3VydmUiOiJibjEyOCJ9LCJwdWJfc2lnbmFscyI6WyIyNDI0MjY0MjEyODM2MDYxMzI1NDg0NDAwMzU1OTc3ODQ0MDA3NTk0MTIyNTQxNjg4NTEwMzAzNjAwMDE1MTE0NDQxOTY5MzMxNCIsIjExMjA4NDE2ODYzNjgwNTgxMTk5MDg0ODg4MzI0MzExNTI5MzkwNTg4NDc1MjE3MDQyMjY3OTI3NzkxMjI5MTU1NDQ2MTU1MjMxMTA4IiwiMTc4NDk5ODE3MjA2MzQyMTI4MDI2NjQxODk5Mjk2NzExNDA3NjI1NTc0ODMyMzY3MDgwOTc3MjM4ODQxNzI2NDExMjQ2OTEyMjIyOTgiXX0\n</code></pre> <ul> <li> <p>In the current example, it\u2019s a proof of authV2  circuit</p> <pre><code>{\n  \"proof\": {\n    \"pi_a\": [\n      \"15283565917729516800269839847594052969623034656737311641536734743918861526238\",\n      \"1579724333925676529326866150852845082683229467504558936716700856588592223780\",\n      \"1\"\n    ],\n    \"pi_b\": [\n      [\n        \"1878586640472591074755242823598227035438812228306288840868465610653621528938\",\n        \"3214417151037178780317504663042463622777386380426564229119168431639075246017\"\n      ],\n      [\n        \"105464285269425255268068920920711260792642080923475170404660595732741333250\",\n        \"20415644131373417860949154771500330274863143023726380682549138868280712977336\"\n      ],\n      [\n        \"1\",\n        \"0\"\n      ]\n    ],\n    \"pi_c\": [\n      \"6850656345324409501817735483770171389201780813635849363994614317549956378079\",\n      \"4204776783427418130842619957995896991695193904917646567176586964932549909011\",\n      \"1\"\n    ],\n    \"protocol\": \"groth16\",\n    \"curve\": \"bn128\"\n  },\n  \"pub_signals\": [\n    \"24242642128360613254844003559778440075941225416885103036000151144419693314\",\n    \"11208416863680581199084888324311529390588475217042267927791229155446155231108\",\n    \"17849981720634212802664189929671140762557483236708097723884172641124691222298\"\n  ]\n}\n</code></pre> </li> </ul> <p>pub_signals  - UserID (profile or genesis)  Challenge ( payload hash ),  GistRoot</p> <p>We create a zero-knowledge proof by proving the specific message using the auth v2 circuit and its inputs.</p> <p>To prepare auth circuit inputs user need to prove that BJJ key is not revoked and included in the latest user state, also user needs to sign a challenge with corresponding private key.</p> <pre><code>type AuthInputs struct {\n\n    GenesisID    *core.ID `json:\"genesisID\"`\n    ProfileNonce *big.Int `json:\"profileNonce\"`\n\n    AuthClaim *core.Claim `json:\"authClaim\"`\n\n    AuthClaimIncMtp    *merkletree.Proof `json:\"authClaimIncMtp\"`\n    AuthClaimNonRevMtp *merkletree.Proof `json:\"authClaimNonRevMtp\"`\n    TreeState          TreeState         `json:\"treeState\"`\n\n    GISTProof GISTProof `json:\"gistProof\"`\n\n    Signature *babyjub.Signature `json:\"signature\"`\n    Challenge *big.Int           `json:\"challenge\"`\n}\n</code></pre> <ul> <li>as a Challenge field, we use the message hash,</li> <li>Gist Proof represents inclusion of the user non-genesis state to the global identity state or non-inclusion of genesis user state.</li> </ul> <p>More about how GIST is here.</p> <p>reference implementations: go:  https://github.com/iden3/go-jwz/blob/main/jwz.go</p> <p>js-jwz :https://github.com/iden3/js-jwz</p> <pre><code>// Token represents a JWZ Token.\ntype Token struct {\n    ZkProof *types.ZKProof // The third segment of the token.  Populated when you Parse a token\n\n    Alg       string // fields that are part of headers\n    CircuitID string // id of a circuit that will be used for proving\n\n    Method ProvingMethod // proving method to create a zkp\n\n    raw rawJSONWebZeroknowledge // The raw token.  Populated when you Parse a token\n\n    inputsPreparer ProofInputsPreparerHandlerFunc\n}\n</code></pre> <p>ZKProof - object that contains proof and pub signals</p> <p>Alg / CircuitId - zkp alg and circuit that is used for proof generation.</p> <p>Method  - Proving method to create a proven token.</p> <p>raw - rawJSONWebZeroknowledge raw representation of the token</p> <p>inputsPreparer - handler that accepts message hash and circuit id and can generate valid circuit inputs</p> <pre><code>// rawJSONWebZeroknowledge is a JSON web token with a signature presented by zero-knowledge proof\ntype rawJSONWebZeroknowledge struct {\n    Payload   []byte                    `json:\"payload,omitempty\"`\n    Protected []byte                    `json:\"protected,omitempty\"`\n    Header    map[HeaderKey]interface{} `json:\"header,omitempty\"`\n    ZKP       []byte                    `json:\"zkp,omitempty\"`\n}\n</code></pre> <p>Payload - payload raw bytes (marshaled protocol message or just string)</p> <p>Header - mapping of Header keys and their values</p> <p>ZKP  - raw proof data</p> <p>Protected - protected claims that were included in proof message hash. (in our case - all headers)</p> <p>Methods to implement:</p> <pre><code>func NewWithPayload(prover ProvingMethod, payload []byte, inputsPreparer ProofInputsPreparerHandlerFunc) (*Token, error) \n</code></pre> <p>Creates new token, but without proof section.</p> <pre><code>func (token *Token) Prove(provingKey, wasm []byte) (string, error) \n</code></pre> <p>Prove function - accepts proving key and circuit wasm file for proof generation. Serializes headers, computes a message hash and calls inputsPreparer to prepare inputs. Then it calls the defined proving method and returns a compacted token with zkp.</p>"},{"location":"proposals/jwz/overview/#algorithm-for-message-hash-generation","title":"Algorithm for message hash generation:","text":"<p>Message hash is a big integer that represents Poseidon Hash. This Poseidon Hash is created using the following algorithm:</p> <ol> <li>Prepare hash to sign: it\u2019s <code>is ASCII(BASE64URL(UTF8(JWZ Protected Header)) || '.' || BASE64URL(JWZ Payload)).</code></li> <li>Get serialized representation of Prepared message.</li> <li>Get the sha256 hash of the message, swap endianness, and create a big Integer.</li> <li>If the resulting hash is not a Q field, defined by the go-iden-crypto library, then divide resulted in a big integer from this hash by Q.</li> <li>Make Poseidon hash of resulting big Integer.</li> </ol> <pre><code>func (token *Token) Verify(verificationKey []byte) (bool, error) \n</code></pre> <p>Verify accepts verification key as a parameter,  computes message hash, and calls defined proving method for proof verification.</p> <pre><code>func (token *Token) FullSerialize() (string, error)\n</code></pre> <p>Returns serialization of rawJSONWebZeroknowledge as JSON string</p> <pre><code>func (token *Token) CompactSerialize() (string, error)\n</code></pre> <p>Returns compacted form (three base64 encoded parts)</p> <pre><code>func Parse(token string) (*Token, error) \n</code></pre> <p>Parses token string (compacted or full serialized ) to Token struct.</p> <p>The last crucial part to implement is ProvingMethod:</p> <p>it\u2019s a zero-knowledge protocol-specific algorithm and circuit-specific method for a proof generation:</p> <pre><code>// ProvingMethod can be used to add new methods for proving or verifying tokens.\ntype ProvingMethod interface {\n    Verify(messageHash []byte, proof *types.ZKProof, verificationKey []byte) error // Returns nil if proof is valid\n    Prove(inputs []byte, provingKey []byte, wasm []byte) (*types.ZKProof, error)   // Returns proof or error\n    Alg() string                                                                   // Returns the alg identifier for this method (example: 'AUTH-GROTH-16')\n    CircuitID() string\n}\n</code></pre> <p>in go-jwz lib, <code>ProvingMethodGroth16AuthV2</code> is defined. It uses \u201cgroth16\u201d alg and \u201cauthV2\u201d circuit</p> <p>Prove method calculates witness and generates proof.</p> <p>Verify method verifies zero-knowledge proof and checks that provided messageHash has been included in Auth Circuit public signlas.</p> <p><pre><code>// AuthPubSignals auth.circom public signals\ntype AuthV2PubSignals struct {\n    UserID    *core.ID         `json:\"userID\"`\n    Challenge *big.Int         `json:\"challenge\"`\n    GISTRoot  *merkletree.Hash `json:\"GISTRoot\"`\n}\n</code></pre> Auth Libraries to fully validate JWZ: https://github.com/iden3/go-iden3-auth</p> <p>https://github.com/iden3/js-iden3-auth</p> <p>Circuit: https://docs.iden3.io/protocol/main-circuits/#authv2</p>"},{"location":"report-problem/overview/","title":"Overview","text":"<p>This protocol describes a mechanism to notify problems between parties. </p>"},{"location":"report-problem/2.0/report-problem-message/","title":"Report Problem","text":"<p>type: <code>https://didcomm.org/report-problem/2.0/problem-report</code></p> <p>Message to report problems between parties. This message follows the DIDComm protocol. </p> <pre><code>{\n  \"pthid\": \"&lt;parent thread&gt;\", // The thread in which the problem occurred\n  \"ack\": [\n    \"&lt;previous report message id 1&gt;\",\n    \"&lt;previous report message id 2&gt;\",\n    \"...\"\n  ],\n  \"body\": {\n    \"code\": \"e.xfer.remote-server-down\",\n    \"comment\": \"Remote server {1} is down when connecting from {2}\",\n    \"args\": [\n      \"https://remote-server.org\",\n      \"https://my-server.org\"\n    ],\n    \"escalate_to\": \"admin@remote-server.org\"\n  },\n  \"from\": \"did:polygonid:polygon:mumbai:2qJG6RYgN1u6v7JAYSdfixSwktnZ7hMzd4t21SCdNu\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\"\n}\n</code></pre> Field Description Type Required pthid Parent thread string \u2705 ack List of IDs of previous messages that triggered this one string \u274c code Problem code (See Problem Codes section) string \u2705 comment Human-friendly text describing the problem. Can include {1} placeholders {2} string \u274c args List of arguments matching the placeholders in comment field string \u274c escalate_to URI where more help about the problem could be received string \u274c <ul> <li> <p>Example of report problem message:</p> <pre><code>{\n    \"id\": \"6f269888-0f93-4012-9f9d-e1da9896f261\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"type\": \"https://didcomm.org/report-problem/2.0/problem-report\",\n    \"thid\": \"18633df6-3a6d-4a40-88bc-7fe7792f6375\",\n    \"pthid\": \"5333207e-7338-4ab3-ac34-bf9a20dab6ab\",\n    \"ack\": [\n        \"23b610b3-aec8-4d1c-8a75-3b22e5483fb0\",\n        \"86fe7cc6-adcd-4530-8e07-92c060b427c8\"\n    ],\n    \"body\": {\n        \"code\": \"e.xfer.remote-server-down\",\n        \"comment\": \"Remote server {1} is down when connecting from {2}\",\n        \"args\": [\n            \"https://remote-server.org\",\n            \"https://my-server.org\"\n        ],\n        \"escalate_to\": \"admin@remote-server.org\"\n    },\n    \"from\": \"did:polygonid:polygon:mumbai:2qJG6RYgN1u6v7JAYSdfixSwktnZ7hMzd4t21SCdNu\",\n    \"to\": \"did:polygonid:polygon:mumbai:2qFroxB5kwgCxgVrNGUM6EW3khJgCdHHnKTr3VnTcp\"\n}\n</code></pre> </li> <li> <p>Problem codes:</p> </li> </ul> <p>Problem codes are lower kebab-case. They are structured as a sequence of tokens delimited by '.' char. Structure: </p> <p>A code is usually structured as 3 or more sections separated by '.'.</p> <p><code>(e|w).(p|m|state-name).descriptor1[.descriptor2[.descriptor3]...]</code></p> <p>The first section is called the sorted and should be 'e' for errors or 'w' for warnings.</p> <p>Second section is the scope of the problem. Scope gives the sender's point of view of what context should be reverted </p> <p>Scope can be 'p' for protocol, 'm' for message, or a formal state name from the sender's state machine in the active protocol. This state machine is the scope to which the sender protocol will revert to.</p> <p>This section is a collection of descriptors that give more context to the problem. Descriptors are separated by '.' char.</p> <p>examples: <pre><code>e.xfer.remote-server-down\ne.trust.user-not-found\ne.p.req-time.expired\n</code></pre></p>"},{"location":"resource-management/overview/","title":"Overview","text":"<p>This protocol provides the ability to manage permissions for various types of resources and can be extended to support CRUD operations for the resources themselves.</p>"},{"location":"resource-management/0.1/delivery/","title":"Delivery","text":"<p>type <code>/resource-management/0.1/delivery</code></p> <p>This message is used to deliver data or responses related to a specific resource between parties. An agent sends it to transfer a payload (e.g., an encrypted profile or authorization response) as an attachment, along with its current delivery status. The status field indicates whether the delivery is pending, completed, or rejected.</p> <pre><code>    {\n        \"id\": \"&lt;resource_id&gt;\",\n        \"attachment_id\": \"&lt;attachment_id&gt;\",\n        \"status\": \"pending | completed | rejected\"\n    }\n</code></pre> Field Description Type Required id Unique identifier of the resource associated with this delivery. In the current implementation, this corresponds to the configuration ID. string \u2705 attachment_id Identifier of the attachment being delivered. Must match the attachment object\u2019s <code>id</code>. string \u2705 status Current delivery status: <code>pending</code>, <code>completed</code>, or <code>rejected</code>. string \u2705 <ul> <li>Example of delivery: <pre><code>{\n    \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"type\": \"https://iden3-communication.io/resource-management/0.1/delivery\",\n    \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n    \"from\": \"did:iden3:polygon:amoy:bob\",\n    \"to\": \"did:iden3:polygon:amoy:zkroom\",\n    \"body\": {\n        \"id\": \"1\",\n        \"attachment_id\": \"urn:uuid:1\",\n        \"status\": \"pending\"\n    },\n    \"attachments\": [\n        {\n        \"id\": \"urn:uuid:1\",\n        \"description\": \"encrypted auth response of Alice profile as attachment\",\n        \"media_type\": \"application/iden3-encrypted-json\",\n        \"data\": {\n            \"json\": {\n            \"ciphertext\": \"encrypted profile\",\n            \"iv\": \"cNpGtrRQRiYOBy0TyD6-dA\",\n            \"protected\": \"eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0\",\n            \"recipients\": [\n                {\n                \"encrypted_key\": \"E1qedVZsQFcXrE7d7veV-uKPFw7In8137FfRO3vFvXjkDcdi3MxS7tF4vWYVRh6zZf3HjYs2BJJks_ZRlc7hahtUC1eByXGcp0QHUIIDZ9dkqcULnH93jCWA8vIBcpMHBvEp71uHAflduwnkXUrTQhqwucDEzMeIqsiOW65LrxSfes02CJUtYkMGU6RR9nhDexbp8cuJUcQ1KKe4kQgF3LKyxk9Usmvzr8ijsK0LKUQBLaIlQALEYEhEcYvA8QNsgaKc7_d4ehdwCLdhZjIOWtvS8ItRr1_2Zikkh20YznNGOPjGeV6gGeMq4-Ns5TnRcmFqXWe9N7FvuGJVBh3vVQ\",\n                \"header\": {\n                    \"alg\": \"RSA-OAEP-256\",\n                    \"kid\": \"did:iden3:polygon:amoy:bob#encryption-key-1\"\n                }\n                }\n            ],\n            \"tag\": \"utaXyGDjPb5FsoTUjxByia7vmhirN6Td-vDyt7K4HbU\"\n            }\n        }\n        }\n    ]\n}\n</code></pre></li> </ul>"},{"location":"resource-management/0.1/permissions-list-fetch/","title":"Permissions List Fetch","text":"<p>type <code>/resource-management/0.1/permissions-list-fetch</code></p> <p>A requester (typically a user or agent) sends this message to retrieve a list of permission requests that have been sent to them by other parties for a specific resource. It is useful for reviewing and managing pending, approved, or rejected permission requests received from other users.</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\"\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource for which the requester wants to fetch permission requests they have received from other parties. string \u2705 <ul> <li>Example of permissions-list-fetch: <pre><code>{\n\"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n\"typ\": \"application/iden3comm-plain-json\",\n\"type\": \"https://iden3-communication.io/resource-management/0.1/permissions-list-fetch\",\n\"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n\"from\": \"did:iden3:polygon:amoy:bob\",\n\"to\": \"did:iden3:polygon:amoy:zkroom\",\n\"body\": {\n    \"id\": \"1\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"resource-management/0.1/permissions-list/","title":"Permissions List","text":"<p>type <code>/resource-management/0.1/permissions-list</code></p> <p>A requester (typically a user or agent) receives this message to communicate the current permission state for a specific resource.</p> <p>It provides lists of users (by their DIDs) who have been granted, rejected, or whose requests are still pending. This message is commonly used as a response to /resource-management/0.1/permissions-requests-list-fetch, or /resource-management/0.1/permissions-list-fetch</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\",\n  \"granted\": [{\"did\": \"&lt;did&gt;\", \"timestamp\": &lt;unix_timestamp&gt;}],\n  \"pending\": [{\"did\": \"&lt;did&gt;\", \"timestamp\": &lt;unix_timestamp&gt;}],\n  \"rejected\": [{\"did\": \"&lt;did&gt;\", \"timestamp\": &lt;unix_timestamp&gt;}]\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource whose permission state is being reported. string \u2705 granted List of objects representing users who have been granted access to the resource. Each entry includes the user\u2019s DID and the timestamp when access was granted. object[] \u274c pending List of objects representing users whose permission requests are awaiting approval. Each entry includes the user\u2019s DID and the timestamp when the request was received. object[] \u274c rejected List of objects representing users whose permission requests were explicitly rejected. Each entry includes the user\u2019s DID and the timestamp when the rejection occurred. object[] \u274c Field Description Type Required did Decentralized Identifier (DID) of the user. string \u2705 timestamp Unix timestamp (in seconds) representing when the permission state was recorded. number \u274c <ul> <li> <p>Example of permissions-list:</p> <p><code>json    { \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\", \"typ\": \"application/iden3comm-plain-json\", \"type\": \"https://iden3-communication.io/resource-management/0.1/permissions-list\", \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\", \"from\": \"did:iden3:polygon:amoy:zkroom\", \"to\": \"did:iden3:polygon:amoy:alice\", \"body\": {   \"id\": \"1\",   \"granted\": [     {       \"did\": \"did:iden3:polygon:amoy:bob\",       \"timestamp\": 1738860452     }   ],   \"pending\": [     {       \"did\": \"did:iden3:polygon:amoy:emma\",       \"timestamp\": 1738860400     }   ],   \"rejected\": [     {       \"did\": \"did:iden3:polygon:amoy:john\",       \"timestamp\": 1738859900     }   ] }    }</code></p> </li> </ul>"},{"location":"resource-management/0.1/permissions-request/","title":"Permissions Request","text":"<p>type <code>/resource-management/0.1/permissions-request</code></p> <p>A requester (e.g., a user or a resource) initiates a permissions request or provides a status for a request to access or manage a specific resource. This message allows requesting permission from the resource owner (or another authorized entity) to access or share the resource, such as a profile or configuration. It can also include attachments containing additional information about the requester (e.g., encrypted authorization response).</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\",\n  \"reason\": \"&lt;reason_for_permission_request&gt;\",\n  \"owner\": \"&lt;owner_did&gt;\"\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource for which permissions are requested. In the current implementation, this corresponds to the configuration ID. string \u2705 reason A human-readable explanation of why access is being requested. string \u274c owner The DID of the resource owner. If omitted, the <code>to</code> field of the message is assumed to represent the owner. string \u274c <ul> <li>Example of permissions-request:</li> </ul> <p><code>json    {     \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",     \"typ\": \"application/iden3comm-plain-json\",     \"type\": \"https://iden3-communication.io/resource-management/0.1/permissions-request\",     \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",     \"from\": \"did:iden3:polygon:amoy:bob\",     \"to\": \"did:iden3:polygon:amoy:zkroom\",     \"body\": {         \"id\": \"1\",         \"reason\": \"request for profile sharing\",         \"owner\": \"did:iden3:polygon:amoy:alice\"     },     \"attachments\": [         {         \"id\": \"urn:uuid:1\",         \"description\": \"encrypted auth response of Bob email profile as attachment\",         \"media_type\": \"application/iden3-encrypted-json\",         \"data\": {             \"json\": {             \"ciphertext\": \"encrypted bob profile\",             \"iv\": \"cNpGtrRQRiYOBy0TyD6-dA\",             \"protected\": \"eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0\",             \"recipients\": [                 {                 \"encrypted_key\": \"E1qedVZsQFcXrE7d7veV-uKPFw7In8137FfRO3vFvXjkDcdi3MxS7tF4vWYVRh6zZf3HjYs2BJJks_ZRlc7hahtUC1eByXGcp0QHUIIDZ9dkqcULnH93jCWA8vIBcpMHBvEp71uHAflduwnkXUrTQhqwucDEzMeIqsiOW65LrxSfes02CJUtYkMGU6RR9nhDexbp8cuJUcQ1KKe4kQgF3LKyxk9Usmvzr8ijsK0LKUQBLaIlQALEYEhEcYvA8QNsgaKc7_d4ehdwCLdhZjIOWtvS8ItRr1_2Zikkh20YznNGOPjGeV6gGeMq4-Ns5TnRcmFqXWe9N7FvuGJVBh3vVQ\",                 \"header\": {                     \"alg\": \"RSA-OAEP-256\",                     \"kid\": \"did:iden3:polygon:amoy:alice#encryption-key-1\"                 }                 }             ],             \"tag\": \"utaXyGDjPb5FsoTUjxByia7vmhirN6Td-vDyt7K4HbU\"             }         }         }     ]     }</code></p>"},{"location":"resource-management/0.1/permissions-requests-list-fetch/","title":"Permissions Requests List Fetch","text":"<p>type <code>/resource-management/0.1/permissions-requests-list-fetch</code></p> <p>A requester (typically a user or agent) sends this message to retrieve a list of permission requests that they have previously created and sent to other parties for a specific resource. It is useful for tracking pending, approved, or rejected requests initiated by the requester.</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\"\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource for which the requester wants to fetch their sent permission requests. string \u2705 <ul> <li>Example of permissions-requests-list-fetch: <pre><code>{\n\"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n\"typ\": \"application/iden3comm-plain-json\",\n\"type\": \"https://iden3-communication.io/resource-management/0.1/permissions-requests-list-fetch\",\n\"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n\"from\": \"did:iden3:polygon:amoy:bob\",\n\"to\": \"did:iden3:polygon:amoy:zkroom\",\n\"body\": {\n    \"id\": \"1\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"resource-management/0.1/permissions-update-request/","title":"Permissions Update Request","text":"<p>type <code>/resource-management/0.1/permissions-update-request</code></p> <p>An agent (e.g., a service or resource controller) sends this message to a client or resource owner to update permission records associated with a specific resource. It communicates the current state of access permissions and may include new entries to add or existing entries to remove. Attachments can also be included to share encrypted information about the requester or related authorization data.</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\",\n  \"current\": [\"&lt;list_of_current_dids_with_access&gt;\"],\n  \"add\": [\"&lt;list_of_dids_to_grant_access&gt;\"],\n  \"remove\": [\"&lt;list_of_dids_to_revoke_access&gt;\"]\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource for which permissions are being updated. In the current implementation, this corresponds to the configuration ID. string \u2705 current List of DIDs that currently have access to the resource. Must always be present, even if empty. string[] \u2705 add List of DIDs to which access should be newly granted. string[] \u274c remove List of DIDs whose access should be revoked. string[] \u274c <ul> <li>Example of permissions-update-request:</li> </ul> <pre><code>   {\n   \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n   \"typ\": \"application/iden3comm-plain-json\",\n   \"type\": \"https://iden3-communication.io/resource-management/0.1/permissions-update-request\",\n   \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",\n   \"from\": \"did:iden3:polygon:amoy:zkroom\",\n   \"to\": \"did:iden3:polygon:amoy:alice\",\n   \"body\": {\n       \"id\": \"1\",\n       \"current\": [\n       \"did:iden3:polygon:amoy:john\",\n       \"did:iden3:polygon:amoy:emma\"\n       ],\n       \"add\": [\n       \"did:iden3:polygon:amoy:bob\"\n       ],\n       \"remove\": [\n       \"did:iden3:polygon:amoy:alex\"\n       ]\n   },\n   \"attachments\": [\n       {\n       \"id\": \"urn:uuid:1\",\n       \"description\": \"encrypted auth response of Bob\u2019s email profile as attachment\",\n       \"media_type\": \"application/iden3-encrypted-json\",\n       \"data\": {\n           \"json\": {\n           \"ciphertext\": \"encrypted bob profile\",\n           \"iv\": \"cNpGtrRQRiYOBy0TyD6-dA\",\n           \"protected\": \"eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0\",\n           \"recipients\": [\n               {\n               \"encrypted_key\": \"E1qedVZsQFcXrE7d7veV-65LrxSfes02CJUtYkMGU6RRxbp8cuJUcQ1KKe4kQgF3LKyxk9Usmvzr8ijsK0LKUQBLaIlQALEYEhEcYvA8QNsgaKc7_d4ehdwCLdhZjIOWtvS8ItRr1_2Zikkh20YzOPjGeV6gGeMq4-Ns5TnRcmFqXWe9N7FvuGJVBh3vVQ...\",\n               \"header\": {\n                   \"alg\": \"RSA-OAEP-256\",\n                   \"kid\": \"did:iden3:polygon:amoy:alice#encryption-key-1\"\n               }\n               }\n           ],\n           \"tag\": \"utaXyGDjPb5FsoTUjxByia7vmhirN6Td-vDyt7K4HbU\"\n           }\n       }\n       }\n   ]\n }\n</code></pre>"},{"location":"resource-management/0.1/permissions-update/","title":"Permissions Update","text":"<p>type <code>/resource-management/0.1/permissions-update</code></p> <p>A resource owner (e.g., a client or user) sends this message in response to a /resource-management/0.1/permissions-update-request. It confirms which DIDs are granted or rejected for access to a specific resource. Attachments may also be included to share encrypted authorization data or other contextual information from the owner.</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\",\n  \"grant\": [\"&lt;list_of_dids_with_granted_access&gt;\"],\n  \"reject\": [\"&lt;list_of_dids_with_rejected_access&gt;\"]\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource for which permissions are being updated. In the current implementation, this corresponds to the configuration ID. string \u2705 grant List of DIDs that have been granted access to the resource. string[] \u274c reject List of DIDs that were explicitly denied access. This field can be omitted if no rejections are needed. string[] \u274c <ul> <li>Example of permissions-update:</li> </ul> <p><code>json  {   \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",   \"typ\": \"application/iden3comm-plain-json\",   \"type\": \"https://iden3-communication.io/resource-management/0.1/permissions-update\",   \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",   \"from\": \"did:iden3:polygon:amoy:alice\",   \"to\": \"did:iden3:polygon:amoy:zkroom\",   \"body\": {     \"id\": \"1\",     \"grant\": [       \"did:iden3:polygon:amoy:bob\",       \"did:iden3:polygon:amoy:john\"     ],     \"reject\": [       \"did:iden3:polygon:amoy:alex\"     ]   },   \"attachments\": [     {       \"id\": \"urn:uuid:1\",       \"description\": \"encrypted auth response of Alice profile as attachment\",       \"media_type\": \"application/iden3-encrypted-json\",       \"data\": {         \"json\": {           \"ciphertext\": \"encrypted alice profile\",           \"iv\": \"cNpGtrRQRiYOBy0TyD6-dA\",           \"protected\": \"eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0\",           \"recipients\": [             {               \"encrypted_key\": \"E1qedVZsQFcXrE7d7veV-uKPFw7In8137FfRO3vFvXjkDcdi3MxS7tF4vWYVRh6zZf3HjYs2BJJks_ZRlc7hahtUC1eByXGcp0QHUIIDZ9dkqcULnH93jCWA8vIBcpMHBvEp71uHAflduwnkXUrTQhqwucDEzMeIqsiOW65LrxSfes02CJUtYkMGU6RR9nhDexbp8cuJUcQ1KKe4kQgF3LKyxk9Usmvzr8ijsK0LKUQBLaIlQALEYEhEcYvA8QNsgaKc7_d4ehdwCLdhZjIOWtvS8ItRr1_2Zikkh20YznNGOPjGeV6gGeMq4-Ns5TnRcmFqXWe9N7FvuGJVBh3vVQ\",               \"header\": {                 \"alg\": \"RSA-OAEP-256\",                 \"kid\": \"did:iden3:polygon:amoy:zkroom#encryption-key-1\"               }             }           ],           \"tag\": \"utaXyGDjPb5FsoTUjxByia7vmhirN6Td-vDyt7K4HbU\"         }       }     }   ] }</code></p>"},{"location":"resource-management/0.1/request/","title":"Request","text":"<p>type <code>/resource-management/0.1/request</code></p> <p>A requester (e.g., a user or a resource) sends a message to return or communicate the status of a previously initiated permissions request.  This message does not start a new permission flow but instead communicates via delivery message the current state of an existing request (e.g., pending, approved, or rejected).</p> <pre><code>{\n  \"id\": \"&lt;resource_id&gt;\",\n  \"owner\": \"&lt;owner_did&gt;\"\n}\n</code></pre> Field Description Type Required id Unique identifier of the resource related to the permission request. string \u2705 owner The DID of the resource owner. If omitted, the <code>to</code> field of the message is assumed to represent the owner. string \u274c <ul> <li>Example of request:</li> </ul> <p><code>json    {     \"id\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",     \"typ\": \"application/iden3comm-plain-json\",     \"type\": \"https://iden3-communication.io/resource-management/0.1/request\",     \"thid\": \"f8aee09d-f592-4fcc-8d2a-8938aa26676c\",     \"from\": \"did:iden3:polygon:amoy:bob\",     \"to\": \"did:iden3:polygon:amoy:zkroom\",     \"body\": {         \"id\": \"1\",         \"owner\": \"did:iden3:polygon:amoy:alice\"     }    }</code></p>"},{"location":"revocation/overview/","title":"Overview","text":"<p>The revocation protocol facilitates obtaining information on whether a revocation nonce has been revoked.</p>"},{"location":"revocation/1.0/request-status/","title":"Request status","text":"<p>type: <code>/revocation/1.0/request-status</code></p> <p>This message enables querying the revocation status of a nonce.</p> <pre><code>{\n    \"revocation_nonce\": \"&lt;revocation_nonce&gt;\"\n}\n</code></pre> Field Description Type Required revocation_nonce revocation nonce interger \u2705 <ul> <li> <p>Example of revocation status request:</p> <pre><code>{\n    \"id\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n    \"thid\": \"1924af5a-7d63-4850-addf-0177cdc34786\",\n    \"type\": \"https://iden3-communication.io/revocation/1.0/request-status\",\n    \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n    \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n    \"typ\": \"application/iden3comm-plain-json\",\n    \"body\": {\n        \"revocation_nonce\": 12314436336\n    }\n}\n</code></pre> </li> </ul>"},{"location":"revocation/1.0/status/","title":"Status","text":"<p>type: <code>/revocation/1.0/status</code></p> <p>The message regarding the revocation status. This message has information about MTP proof and information about the issuer state that was used for generating this proof.</p> <pre><code>{\n    \"issuer\": {\n        \"state\": \"&lt;issuer_state&gt;\",\n        \"rootOfRoots\": \"&lt;issuer_root_of_roots_tree_root\",\n        \"claimsTreeRoot\": \"&lt;issuer_claim_tree_root&gt;\",\n        \"revocationTreeRoot\": \"&lt;issuer_revocation_tree_root&gt;\"\n    },\n    \"mtp\": \"&lt;obj_with_mtp_proof&gt;\"\n}\n</code></pre> Field Description Type Required info.issuer.state Issuer state string \u2705 issuer.rootOfRoots Issuer root of roots tree root string \u274c issuer.claimsTreeRoot Issuer claim tree root string \u2705 issuer.revocationTreeRoot Issuer revocation tree root string \u274c mtp Merkle tree proof. This proof for exists or non-exists revocation nonce in issuer`s revication tree *object \u2705 <p>More about <code>mtp</code> field: https://github.com/iden3/claim-schema-vocab/blob/main/proofs/SparseMerkleTreeProof.md</p> <ul> <li> <p>Example of revocation status response:</p> <pre><code>{\n  \"id\": \"f4b6f1a3-ebf4-49a7-8c2d-5d2649b1e65d\",\n  \"typ\": \"application/iden3comm-plain-json\",\n  \"type\": \"https://iden3-communication.io/revocation/1.0/status\",\n  \"to\": \"did:polygonid:polygon:mumbai:2qJUZDSCFtpR8QvHyBC4eFm6ab9sJo5rqPbcaeyGC4\",\n  \"from\": \"did:iden3:polygon:mumbai:x3HstHLj2rTp6HHXk2WczYP7w3rpCsRbwCMeaQ2H2\",\n  \"body\": {\n    \"issuer\": {\n      \"claimsTreeRoot\": \"29570142accabef4e58cbdcd38b0ecb22bb9b75ef19503dc47986c2f3aec4712\",\n      \"revocationTreeRoot\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n      \"rootOfRoots\": \"a5ec315235e69f56080d21ac4b85986cdfa51b90667d496234de1ba48bbe020f\",\n      \"state\": \"c8097eb17e33ef531c9de363f20167c88c09d0ca7ab9ce57b27fecb451b1c320\"\n    },\n    \"mtp\": {\n      \"existence\": false,\n      \"siblings\": []\n    }\n  }\n}\n</code></pre> </li> </ul>"},{"location":"w3c/display-method/overview/","title":"Display method","text":""},{"location":"w3c/display-method/overview/#description","title":"Description","text":"<p>To improve credential usage, a client needs to be able to customize the presentation of credentials in user wallets. A standard must be established that will guide the wallet in displaying credential cards. This will improve the user experience and allow issuers to present their own special presentation for credentials.</p>"},{"location":"w3c/display-method/overview/#changes-in-the-verifiable-credential","title":"Changes in the verifiable credential","text":"<p>In protocol level, the display method is integrated into the W3C verifiable credential:</p> <pre><code>{\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://schema.iden3.io/core/jsonld/displayMethod.jsonld\"\n    ...\n  ],\n  ...\n  \"displayMethod\": {\n    \"id\": \"ipfs://QmY5ab9FAMEFtdG1VHBXhHANRscUTbDzrG6LC2FWqicc5J\",\n    \"type\": \"Iden3BasicDisplayMethodV1\"\n  }\n}\n</code></pre> <p>The data model of <code>displayMethod</code>:</p> Field name Data type Description Required id string IPFS link or URL to metadata \u2705 type string Type of refresh service. \u2705 <p>Supported types:</p> <ol> <li> <p>Iden3BasicDisplayMethodV1. Type definition. The type supports the metadata format:     <pre><code>{\n  \"title\": \"KYC Country of Residence\",\n  \"description\": \"Know you customer verification\",\n  \"issuerName\": \"PolygonID Issuer\",\n  \"titleTextColor\": \"#000000\",\n  \"descriptionTextColor\": \"#000000\",\n  \"issuerTextColor\": \"#000000\",\n  \"backgroundImageUrl\": \"ipfs://Qmagkvd9Bz8yXXupWZtBC69RqGfRex72Qou1XjUNvC7fLB\",\n  \"logo\": {\n    \"uri\": \"ipfs://QmWkSgmHbKRfhndWqHwVgfVpZSrWNiWZMTHb6k5KxY8ySc\",\n    \"alt\": \"Logo PolygonID issuer\"\n  }\n}\n</code></pre></p> Attribute Purpose Data type Required title Credential title string \u274c description Description string &lt; 120 characters \u274c issuerName Issuer name string \u274c titleTextColor Text color for title and issueName hex \u274c descriptionTextColor Text color for description hex \u274c issuerTextColor Text color for issuer name hex \u274c backgroundColor Background color hex \u274c backgroundImageUrl Background image url IPFS or URL (.svg, .png) \u274c logo.uri Logo URL IPFS or URL 32x32 (.svg, .png) \u274c logo.alt Logo text string \u274c </li> </ol>"},{"location":"w3c/proofs/bjj/","title":"BJJSignature2021","text":"<p>This specification describes the BabyJubjub 2021 Signature Suite, created in 2021 for the Verifiable Credentials Data Integrity Proof specification. The Signature Suite is designed to be zk-friendly, allowing the implementation of an additional security layer that can offer enhance privacy through zero-knowledge signature proofs.</p> <p>This document is a draft specification developed by 0kims association and is provided for public review and feedback. The current version of the document is a work in progress and may be subject to changes or updates based on community input, technical advancements, or further research. The specification has not yet been submitted to, reviewed or approved by any formal standards organization such as the W3C. However, it is intended to align closely with the existing W3C recommendations, specifications, and best practices related to decentralized identifiers, verifiable credentials, and digital signatures.</p>"},{"location":"w3c/proofs/bjj/#introduction","title":"Introduction","text":"<p>This specification presents the BabyJubjub 2021 Signature Suite. The suite employs EdDSA on the BabyJubJub curve as the signature algorithm, providing an efficient structure for signing and verifying credentials while being zk-friendly. Although the signature suite itself does not actively involve zero-knowledge proofs, its design is conducive to privacy-preserving computations and can be easily integrated with zkSNARKs and other zero-knowledge proof systems. This document details the components, structure, and implementation guidance for the BabyJubjub 2021 Signature Suite, catering to developers, implementers, and users.</p>"},{"location":"w3c/proofs/bjj/#terminology","title":"Terminology","text":"<p>The following terms are used to describe concepts involved in the generation and verification of the Linked Data Proof signature suite.</p> Terms <p>signature suite</p> <p>A specified set of cryptographic primitives typically consisting of a canonicalization algorithm, a message digest algorithm, and a signature algorithm that are bundled together by cryptographers for developers for the purposes of safety and convenience.</p> <p>canonicalization algorithm</p> <p>An algorithm that takes an input document that has more than one possible representation and always transforms it into a canonical form. This process is sometimes also called normalization.</p> <p>message digest algorithm</p> <p>An algorithm that takes a message, preferably in some canonical form and produces a cryptographic output called a digest that is often many orders of magnitude smaller than the input message. These algorithms are often 1) very fast, 2) non-reversible, 3) cause the output to change significantly when even one bit of the input message changes, and 4) make it infeasible to find two different inputs for the same output.</p> <p>canonical form</p> <p>The output of applying a canonicalization algorithm to an input document.</p> <p>signature algorithm</p> <p>An algorithm that takes an input message and produces an output value where the receiver of the message can mathematically verify that the message has not been modified in transit and came from someone possessing a particular secret.</p> <p>linked data document</p> <p>A document comprised of linked data.</p> <p>linked data proof</p> <p>A proof which is a set of attributes that represent a linked data digital proof and the parameters required to verify it as defined by RDF-N-Quads.</p> <p>linked data proof document</p> <p>A linked data document featuring one or more linked data proofs.</p> <p>BJJSignature2021</p> <p>The <code>type</code> of the linked data proof for the signature suite BabyJubjub 2021.</p> <p>Iden3StateInfo2023</p> <p>The <code>type</code> representing state information, a method for maintaining the issuer's state information and validating proofs against this data to ensure secure and efficient identity management within decentralized systems.**</p>"},{"location":"w3c/proofs/bjj/#suite-definition","title":"Suite Definition","text":"<p>The BabyJubjub 2021 signature suite MUST be used in conjunction with the signing and verification algorithms in the Linked Data Signatures specification. The suite consists of the following algorithms:</p> Parameter Value Specification canonicalizationAlgorithm https://w3id.org/security#URDNA2015 RDF Dataset Normalization 1.0 digestAlgorithm Poseidon POSEIDON: A New Hash Function for Zero-Knowledge Proof Systems signatureAlgorithm EdDSA-BabyJubJub EdDSA For Baby Jubjub Elliptic Curve with MiMC-7 Hash"},{"location":"w3c/proofs/bjj/#modification-to-algorithms","title":"Modification to Algorithms","text":"<p>The hash function in the signature algorithm has been repleaced to Poseidon hash function.</p>"},{"location":"w3c/proofs/bjj/#document-merklization-algorithm","title":"Document Merklization Algorithm","text":"<p>The signature suite incorporates a Document Merklization algorithm to provide enhanced zero-knowledge compatibility support. This feature enables efficient querying of individual entries within JSON-LD documents in the context of zk-SNARK proofs. By constructing a Sparse Merkle Tree from the document, the algorithm supports selective disclosure of Verifiable Credential (VC) entries, efficiently prove membership, non-membership, and other predicate satisfactions related to the JSON-LD document, while maintaining the privacy and integrity of the data.</p> <p>Prior to applying the Merklization algorithm, the document must be in its expanded and canonicalized form.</p> <p>The Merklization algorithm works as follow:</p> <ol> <li>Obtain a list of RDF Quads from the canonicalized document.</li> <li>For each Quad, construct a key-value pair where the key represents the complete type path, and the value corresponds to the entry's value.</li> <li>Insert each key-value pair into the Merkle Tree, with the key serving as the path in the tree and the leaf's value being the hash of the pair's value, computed using the designated message digest algorithm.</li> <li>For each key-value pair, first hash the key using the designated message digest algorithm, and use the hashed key as the path in the Merkle Tree. Then, hash the value using the same message digest algorithm, and set the resulting hash as the value of the corresponding leaf node in the tree.</li> </ol> <p>Supported ld data types for merklization:</p> Datatypes <ol> <li>xsd:integer ( from prime / 2 to prime / 2)</li> <li>xsd:positiveInteger ( from 1 to prime)</li> <li>xsd:string ( sponge hash of string bytes)</li> <li>xsd:double ( Canonical representation IEEE is hashed as string )</li> <li>xsd:nonNegativeInteger ( from 0 to prime)</li> <li>xsd:negativeInteger  (from -prime to -1)</li> <li>xsd:datetime (nanoseconds of unix timestamp, date after 1970-01-01 is supported )</li> <li>xsd:boolean (Poseidon hash of 1 or 0) </li> </ol> <p>prime number is specific to each hash algorithm, for current Poseidon it is <code>21888242871839275222246405745257275088548364400416034343698204186575808495617</code></p> <p>More about jsonld merklization can be found here. </p>"},{"location":"w3c/proofs/bjj/#field-proof-example","title":"Field proof example","text":"<p>To better comprehend how the signature suite enables field proof, let us examine the underlying mechanism.  In this process, a credential undergoes Merklization, during which each entry of the document is stored in a leaf. Subsequently, the merkle root of jsonld document as a part of core claim representation is signed by the issuer.  To facilitate the proof check, the prover can share the following information with the verifier:</p> <ol> <li>The core claim representation of the verifiable credential.</li> <li>The issuer's signature on the of core claim representation.</li> <li>The relevant authentication paths for the proving the validity of the issuer key.</li> </ol> <p>By providing this information, the prover demonstrates the possession of a valid credential containing specific entries without revealing the entire credential content. Consequently, this enables the prover to confirm the issuance of a credential of a particular type that contains specific values while preserving the confidentiality of other credential details. This approach aligns with W3C's official specifications and ensures data privacy during the verification process.</p>"},{"location":"w3c/proofs/bjj/#bjjsignature2021","title":"BJJSignature2021","text":"<p>All verifiable credentials issued with the BabyJubjub 2021 signature suite must include a proof object with \"BJJSignature2021\" as the proof type. The BJJSignature2021 proof contains the issuer's data, the core claim, and a signature created using the issuer's private key. The following example demonstrates a BJJSignature2021 proof:</p> <pre><code>    {\n        \"type\": \"BJJSignature2021\",\n        \"issuerData\": {\n            \"id\": \"did:polygonid:polygon:mumbai:2qHHBynUfh5UU7VimmwCT7MUtBhEcxXLm8ucEpkNMA\",\n            \"state\": {\n                \"claimsTreeRoot\": \"c40193ee97ce84705e63b7989fc303dde5a0f1e5648568cfafea37393728aa15\",\n                \"value\": \"1a76fb92056a01afa69f8d1181b25079be70024e81fb48c3c25fdc5d8887a326\"\n            },\n            \"authCoreClaim\": \"cca3371a6cb1b715004407e325bd993c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d9780102f9811e3efdade2afc5af9b5385a8f889a6b56ba8508c9896daf8040700623c34180136b3316f5012721f456ac2560e35acf53b32bf8b4de595f2b1170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n            \"mtp\": {\n                \"existence\": true,\n                \"siblings\": []\n            },\n            \"credentialStatus\": {\n                \"id\": \"http://example.com/v1/did%3Apolygonid%3Apolygon%3Amumbai%3A2qHHBynUfh5UU7VimmwCT7MUtBhEcxXLm8ucEpkNMA/claims/revocation/status/0\",\n                \"revocationNonce\": 0,\n                \"type\": \"SparseMerkleTreeProof\"\n            }\n        },\n        \"coreClaim\": \"19ad4768b6f32694530c34cc187260702a0000000000000000000000000000000212b146402879cb0c89aee16ee6f3433f440c552c0559f0e50ee57f223c0c0002124436c8baf3d426bb6a9b32870cbc090174521431f29f3d2280a7aeca302f0000000000000000000000000000000000000000000000000000000000000000dfd04e04000000005f9b83650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"signature\": \"cc917d9f4cf89b57b23228dbdced7a052619457f29123b09e2bd9d4bef9cf70e5bda110c9baa3756cf6ad6e76030c9b802e55c617be35aafdd3e261e12c08f00\"\n    }\n</code></pre> <p>Where: </p> <ul> <li><code>coreClaim</code> is a signed hex of core claim representation of W3C credential.</li> <li><code>signature</code> is a hex value of BJJ compressed signature produced by the issuer public key.</li> <li>The issuer stores their public key in the state tree. In proof it is represented as an <code>authCoreClaim</code> hex in the <code>issuerData</code> property. <code>mtp</code> property contains merkle tree proof of inclusion to the issuer claims tree.</li> <li><code>issuerData</code> contains information about how to check the credential status of the issuer key. More details regarding <code>credentialStatus</code> can be found here.</li> <li><code>state</code> object represents the roots of issuer's trees  at the time of auth key has been issued.</li> </ul> <p>The proof contains the signature of the coreClaim which is a serialization of the whole VC document except for the proof. The signature is created using the issuer's private key.</p>"},{"location":"w3c/proofs/bjj/#proof-generation","title":"Proof Generation","text":"<p>The BJJSignature2021 proof generation process follows a specific algorithm to ensure the integrity and authenticity of JSON-LD documents. The steps of the algorithm are as follows:</p> <ol> <li>Expand the JSON-LD document using the JSON-LD 1.1 Processing Algorithms.</li> <li>Canonicalize the document using the URDNA2015 algorithm.</li> <li>Apply the Document Merklization Algorithm to create a Merkle tree from the canonicalized document.</li> <li>Create a core claim representation from W3C credential according to the core protocol. Document Root is written into one of the data slots.</li> <li>Sign the hex of core claim using the associated private key.</li> </ol> <p>To see an example of Iden3StateInfo2023 object in a DID document, please refer to the example provided in the Examples section of this document.</p>"},{"location":"w3c/proofs/bjj/#proof-verification","title":"Proof Verification","text":"<p>During the verification of the verifiable credential, the verifier must check not only the signature of credential but also that the public key used to sign the document. </p> <p>To verify the authenticity and integrity of signature, the following steps should be performed:</p> <ol> <li>Retrieve the issuer's DID document and locate the Iden3StateInfo2023 object issuer did document example containing the state root and other relevant information. Check that state value in proof is published onchain or is genesis one.</li> <li>Verify that the issuer's public key, which signed the document, has been included in requested state with merkletree proof generation</li> <li>Obtain the core claim of the Merkleized credential, the issuer's signature on it from proof object.</li> <li>Validate the issuer's signature on the VC root using the issuer's public key.</li> <li>Validate that issuer's public key is not revoked. </li> <li>Obtain the root of the Merklized credential from the <code>coreClaim</code>. See documentation</li> <li>Reconstruct the Merkle tree root of credential using the json ld merklization procedure and compare with an extracted root  the <code>coreClaim</code>.</li> </ol>"},{"location":"w3c/proofs/bjj/#implementations","title":"Implementations","text":"<p>Golang JS</p>"},{"location":"w3c/proofs/bjj/#resolved-did-document-of-issuer","title":"resolved did document of issuer","text":"Example <pre><code>{\n    \"@context\": [\n    \"https://www.w3.org/ns/did/v1\",\n    \"https://schema.iden3.io/core/jsonld/auth.jsonld\"\n    ],\n    \"id\": \"did:polygonid:polygon:mumbai:2qFGtDk2SyTLJgUx576mn2peqeFtWmhsSvWLoAnom4\",\n    \"verificationMethod\": [\n        {\n            \"id\": \"did:polygonid:polygon:mumbai:2qFGtDk2SyTLJgUx576mn2peqeFtWmhsSvWLoAnom4#stateInfo\",\n            \"type\": \"Iden3StateInfo2023\",\n            \"controller\": \"did:polygonid:polygon:mumbai:2qFGtDk2SyTLJgUx576mn2peqeFtWmhsSvWLoAnom4\",\n            \"stateContractAddress\": \"80001:0x134B1BE34911E39A8397ec6289782989729807a4\",\n            \"published\": true,\n            \"info\": {\n                \"id\": \"did:polygonid:polygon:mumbai:2qFGtDk2SyTLJgUx576mn2peqeFtWmhsSvWLoAnom4\",\n                \"state\": \"78d9e333fbede1722f53a6a059cba0b36c0ee62f60871f0d1761eda0aeb5b928\",\n                \"replacedByState\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n                \"createdAtTimestamp\": \"1707399475\",\n                \"replacedAtTimestamp\": \"0\",\n                \"createdAtBlock\": \"45691433\",\n                \"replacedAtBlock\": \"0\"\n            },\n            \"global\": {\n                \"root\": \"61c52f21698f424e473113723729e28c9c895360b78c930a97875da04ef4242f\",\n                \"replacedByRoot\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n                \"createdAtTimestamp\": \"1707418701\",\n                \"replacedAtTimestamp\": \"0\",\n                \"createdAtBlock\": \"45700072\",\n                \"replacedAtBlock\": \"0\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"w3c/proofs/smt/","title":"Iden3SparseMerkleTreeProof","text":"<p>This specification describes the Iden3SparseMerkleTreeProof Signature Suite, created in 2021 for the Verifiable Credentials Data Integrity Proof specification. The Signature Suite is designed to be zk-friendly, allowing the implementation of an additional security layer that can offer enhance security based in merkle tree data structures.  This document is a draft specification developed by 0kims association and is provided for public review and feedback. The current version of the document is a work in progress and may be subject to changes or updates based on community input, technical advancements, or further research. The specification has not yet been submitted to reviewed, or approved by any formal standards organization such as the W3C. However, it is intended to align closely with the existing W3C recommendations, specifications, and best practices related to decentralized identifiers, verifiable credentials, and digital signatures.</p>"},{"location":"w3c/proofs/smt/#introduction","title":"Introduction","text":"<p>This specification presents the Iden3 Sparse Merkle Tree Signature Suite. The suite employs a novel technique for proving and verifying credentials while being zk-friendly. Although the signature suite itself does not actively involve zero-knowledge proofs, its design is conducive to privacy-preserving computations and can be easily integrated with zkSNARKs and other zero-knowledge proof systems.  This document details the components, structure, and implementation guidance for the Iden3 Sparse Merkle Tree Signature Suite, catering to developers, implementers, and users.</p>"},{"location":"w3c/proofs/smt/#terminology","title":"Terminology","text":"<p>The following terms are used to describe concepts involved in the generation and verification of the Linked Data Proof signature suite.</p> Terms <p>signature suite</p> <p>A specified set of cryptographic primitives typically consisting of a canonicalization algorithm, a message digest algorithm, and a signature algorithm that are bundled together by cryptographers for developers for the purposes of safety and convenience.</p> <p>canonicalization algorithm</p> <p>An algorithm that takes an input document that has more than one possible representation and always transforms it into a canonical form. This process is sometimes also called normalization.</p> <p>message digest algorithm</p> <p>An algorithm that takes a message, preferably in some canonical form and produces a cryptographic output called a digest that is often many orders of magnitude smaller than the input message. These algorithms are often 1) very fast, 2) non-reversible, 3) cause the output to change significantly when even one bit of the input message changes, and 4) make it infeasible to find two different inputs for the same output.</p> <p>canonical form</p> <p>The output of applying a canonicalization algorithm to an input document.</p> <p>signature algorithm</p> <p>An algorithm that takes an input message and produces an output value where the receiver of the message can mathematically verify that the message has not been modified in transit and came from someone possessing a particular secret.</p> <p>linked data document</p> <p>A document comprised of linked data.</p> <p>linked data proof</p> <p>A proof which is a set of attributes that represent a linked data digital proof and the parameters required to verify it as defined by RDF-N-Quads.</p> <p>linked data proof document</p> <p>A linked data document featuring one or more linked data proofs.</p> <p>Iden3SparseMerkleTreeProof</p> <p>The <code>type</code> of the linked data proof for the Iden3 Sparse Merkle Tree Signature Suite.</p> <p>Iden3StateInfo2023</p> <p>The <code>type</code> representing state information, a method for maintaining the issuer's state information and validating proofs against this data to ensure secure and efficient identity management within decentralized systems.**</p>"},{"location":"w3c/proofs/smt/#suite-definition","title":"Suite Definition","text":"<p>The BabyJubjub 2021 signature suite MUST be used in conjunction with the signing and verification algorithms in the Linked Data Signatures specification. The suite consists of the following algorithms:</p> Parameter Value Specification canonicalizationAlgorithm https://w3id.org/security#URDNA2015 RDF Dataset Normalization 1.0 digestAlgorithm Poseidon POSEIDON: A New Hash Function for Zero-Knowledge Proof Systems signatureAlgorithm SMT proof Inclusion of core claim info to Issuer merkle tree"},{"location":"w3c/proofs/smt/#modification-to-algorithms","title":"Modification to Algorithms","text":"<p>The hash function in the signature algorithm has been repleaced to Poseidon hash function.</p>"},{"location":"w3c/proofs/smt/#document-merklization-algorithm","title":"Document Merklization Algorithm","text":"<p>More about jsonld merklization can be found here.</p>"},{"location":"w3c/proofs/smt/#iden3sparsemerkletreeproof","title":"Iden3SparseMerkleTreeProof","text":"<p>All verifiable credentials issued with the Iden3 Sparse Merkle Tree Signature Suite must include a proof object with \"Iden3SparseMerkleTreeProof\" as the proof type. The Iden3SparseMerkleTreeProof contains the <code>issuerData</code>, <code>coreClaim</code>, and the <code>mtp</code> (the merkle tree proof of inclusion of the core claim to the issuer claim tree root) of the relevant credential in the issuer's state tree. The following example demonstrates a Iden3SparseMerkleTree proof:</p> <pre><code>        {\n            \"type\": \"Iden3SparseMerkleTreeProof\",\n            \"issuerData\": {\n                \"id\": \"did:iden3:polygon:mumbai:wz7EXpsG9jdQC4edi3kyXC5SroZfqbcPKTYaJc5t6\",\n                ...\n            },\n            \"coreClaim\": \"c9b2370371b7fa8b3dab2a5ba81b68382a00000000000000000000000000000001129e344820de5301d7ae7f88ba5143f4ab9a9506e82331ec7ae8b21a830d006059621a4a3ed91795fc7919557e41c793ddbe93a30bc970f005cc72f89760270000000000000000000000000000000000000000000000000000000000000000c913b95700000000281cdcdf0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n            \"mtp\": {\n                \"existence\": true,\n                \"siblings\": [\n                    \"12337778158204247406578936191019732894620603082018578837880614994697897821924\",\n                    \"0\",\n                    \"0\",\n                    \"0\",\n                    \"21666974695683480301917255007901264320661483352297531017037182795057172235134\"\n                ]\n            }\n        }\n</code></pre> <p>The claim gets added to the issuer\u2019s state. This action modifies the structure of the Merkle Tree and, therefore, the state has to be updated with the new Merkle root. The proof of issuance is the inclusion of the claim iself inside the issuer\u2019s Claims Tree.</p>"},{"location":"w3c/proofs/smt/#proof-generation","title":"Proof Generation","text":"<p>The Iden3SparseMerkleTreeProof proof generation process follows a specific algorithm to ensure the integrity and authenticity of JSON-LD documents. The steps of the algorithm are as follows:</p> <ol> <li>Expand the JSON-LD document using the JSON-LD 1.1 Processing Algorithms.</li> <li>Canonicalize the document using the URDNA2015 algorithm.</li> <li>Apply the Document Merklization Algorithm to create a Merkle tree from the canonicalized document.</li> <li>Create a core claim representation from W3C credential according to the core protocol. Document Root is written into one of the data slots.</li> <li>Add the core claim hash index and hash value  to issuer\u2019s tree state and update the state according to the protocol rules</li> </ol>"},{"location":"w3c/proofs/smt/#proof-verification","title":"Proof Verification","text":"<p>To verify the authenticity and integrity of the credential, the following steps should be performed:</p> <ol> <li>Retrieve the issuer's DID document and locate the Iden3StateInfo2023 object issuer did document example containing the state root and other relevant information. Check that state value in proof is published onchain or is genesis one.</li> <li>Check the validity of mtp proof of  the <code>coreClaim</code>, which has been included in the requested state with merkletree proof generation.</li> <li>Obtain the root of the Merklized credential from the <code>coreClaim</code>. See documentation</li> <li>Reconstruct the Merkle tree root of credential using the json ld merklization procedure and compare with an extracted root  the <code>coreClaim</code>.</li> </ol>"},{"location":"w3c/proofs/smt/#implementations","title":"Implementations","text":"<p>Golang JS</p>"},{"location":"w3c/refresh-service/overview/","title":"Refresh service","text":""},{"location":"w3c/refresh-service/overview/#description","title":"Description","text":"<p>In some cases, having mechanisms to refresh issued credentials can be helpful. A refresh service allows credentials to be updated by the user client. This approach ensures that users are consistently using the updated information provided by the issuer, such as a user balance, a game score, or other data that can be frequently updated.</p>"},{"location":"w3c/refresh-service/overview/#example","title":"Example","text":"<p>Consider an example of balance credentials, where a user proves his balance to get some benefits. The balance can be changed a lot during a short period. In this case, the user needs to interact with the issuer every time they need to use the credential. This is where the refresh service comes in handy. The refresh service can handle necessary data updates on the background of the user client without additional interaction between the issuer and the user.</p>"},{"location":"w3c/refresh-service/overview/#changes-in-the-verifiable-credential","title":"Changes in the verifiable credential","text":"<p>In protocol level, the revocation service is integrated into the W3C verifiable credential:</p> <pre><code>{\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://schema.iden3.io/core/jsonld/iden3proofs.jsonld\"\n    ...\n  ],\n  ...\n  \"refreshService\": {\n    \"id\": \"https://refreshService.example\", // iden3comm agent endpoint\n    \"type\": \"Iden3RefreshService2023\"\n  }\n}\n</code></pre> <p>The data model of <code>refershService</code>:</p> Field name Data type Description Required type string Type of refresh service. \u2705 id string URL to iden3comm agent endpoint \u2705 <p>Supported types:</p> <ol> <li>Iden3RefreshService2023. Type definition.</li> </ol>"},{"location":"w3c/refresh-service/overview/#client-communication-with-refresh-service","title":"Client communication with refresh service","text":"<p>If the <code>refreshService</code> section within a verifiable credential is of type Iden3RefreshService2023, the client is required to construct a refresh iden3comm message wrapped in JWZ token. This token should then be sent to the agent endpoint specified by <code>refreshService.id</code>.</p>"},{"location":"w3c/refresh-service/overview/#integration-examples","title":"Integration examples","text":"<ol> <li>Golang integration:<ol> <li>Issuer-node.</li> </ol> </li> <li>JS integration:<ol> <li>JS-SDK.</li> </ol> </li> </ol>"},{"location":"w3c/status/overview/","title":"Credential status","text":"<p>Credential Status (CS) is an essential component of Verifiable Credentials (VC). Its primary purpose is to provide information about the revocation status of a credential. Anyone can utilize CS to determine whether a VC has been revoked or remains valid. Within the iden3 Verifiable Credentials system, there are four types of CS available:</p> <ol> <li>SparseMerkleTreeProof</li> <li>Iden3ReverseSparseMerkleTreeProof</li> <li>Iden3commRevocationStatusV1.0</li> <li>Iden3OnchainSparseMerkleTreeProof2023</li> </ol> <p>All these types have the same message format:</p> <pre><code>{\n  \"id\": \"...\",\n  \"type\": \"...\",\n  \"revocationNonce\": 0\n}\n</code></pre> <p><code>id</code> - a unique ID for the CS. The content of this field depends on the <code>type</code>.</p> <p><code>type</code> - the type of the credential status.</p> <p><code>revocationNonce</code> -a unique number for the Verifiable credential.</p>"},{"location":"w3c/status/overview/#sparsemerkletreeproof","title":"SparseMerkleTreeProof","text":"<p>Example of CS:</p> <pre><code>\"credentialStatus\": {\n    \"id\": \"&lt;issuer-agent-url&gt;/api/v1/identities/did%3Apolygonid%3Apolygon%3Amumbai%3A2qEjShhoHGFdi88ZPCXcApSesmGzk8aqqf3hymnyiW/claims/revocation/status/1016367164\",\n    \"revocationNonce\": 1016367164,\n    \"type\": \"SparseMerkleTreeProof\"\n}, \n</code></pre> <p>If the <code>type == SparseMerkleTreeProof</code>, the <code>id</code> field will contain a URL to the issuer node. Users can utilize this URL to process the revocation status.</p>"},{"location":"w3c/status/overview/#workflow","title":"Workflow:","text":"<ol> <li> <p>Making an HTTP call to the URL from the <code>id</code> field:</p> <p>Example of response:</p> <pre><code>{\n    \"issuer\": {\n        \"state\": \"52e66f413231e4d7c43cc09aaf076b8bc0f3a4f18f95e29dc92ab001e401e708\",\n        \"claimsTreeRoot\": \"c5a516e17a16160fdf567c130d73909fefbd5fcec1ad74b9707fbac989d4e812\"\n    },\n    \"mtp\": {\n        \"existence\": false,\n        \"siblings\": []\n    }\n}\n</code></pre> <p>More about this response: https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/core/vocab/SparseMerkleTreeProof.md</p> <p>In this case, when <code>mtp.existence == false</code>, it means that the user's revocationNonce doesn't exist in the revocation tree. This is a positive outcome for the user because it allows them to build a non-revocation proof.</p> </li> <li> <p>Building non-revocation/revocation proof using the response.</p> </li> </ol>"},{"location":"w3c/status/overview/#iden3reversesparsemerkletreeproof","title":"Iden3ReverseSparseMerkleTreeProof","text":"<p>In this scenario, the issuer utilizes the RHS server to store the tree info in a distributed manner. This approach ensures data resilience and accessibility in a distributed fashion.</p> <p>Moreover, the credentialStatus contains <code>statusIssuer</code> as a backup mechanism in case the RHS server becomes unavailable. By having the <code>statusIssuer</code>, the issuer retains the ability to verify and manage the CS even if the storage through the RHS server encounters any issues.</p> <p>This dual approach of utilizing a decentralized system while also having a backup option in the form of <code>statusIssuer</code> enhances the reliability and availability of the revocation and verification process for the users' credentials.</p> <p>For now, only <code>SparseMerkleTreeProof</code> credential status is supported as a backup optio</p> <p>****Example :******</p> <pre><code>\"credentialStatus\": {\n    \"id\": \"https://rhs-staging.polygonid.me?state=a1abdb9f44c7b649eb4d21b59ef34bd38e054aa3e500987575a14fc92c49f42c\",\n    \"revocationNonce\": 1016367164,\n    \"statusIssuer\": {\n        \"id\": \"https://1e1a-46-133-26-136.ngrok-free.app/api/v1/identities/did%3Apolygonid%3Apolygon%3Amumbai%3A2qEeAALESZRcocQTh7ri1skPKkMiHftaH1ufEVJWku/claims/revocation/status/0\",\n        \"revocationNonce\": 1016367164,\n        \"type\": \"SparseMerkleTreeProof\"\n    },\n    \"type\": \"Iden3ReverseSparseMerkleTreeProof\"\n}\n</code></pre>"},{"location":"w3c/status/overview/#workflow_1","title":"Workflow:","text":"<ol> <li>Attempt to retrieve the latest issuer state using the state contract. Utilize the <code>GetLatestStateById</code> method from the state contract.</li> <li>In the event that the state contract returns the error <code>IDENTITY_DOES_NOT_EXIST</code>, follow these steps:<ol> <li>If the <code>state</code> parameter exists and it is a <code>genesis</code> state, use this state to generate a non-revocation proof via the RHS service. Provide the extracted state as the latest state and the revocation nonce to the RHS service.</li> <li>If the <code>state</code> parameter does not exist - throw an error.<ol> <li>As a legacy option, for statuses where state doesn\u2019t persist in the current implementation, we use additional custom issuer data from BJJSignatureProof or Iden3SparseMerkleTreeProof  to extract tree roots and the issuer\u2019s state to construct a non-revocation proof. If this param is not provided - an error is thrown. This is not mandatory in new implementations.      </li> </ol> </li> </ol> </li> <li>If the state contract returns the latest state, utilize the RHS service with the latest state and nonce to generate non-revocation/revocation proof according to the algorithm.</li> <li>In the event that the RHS server is unavailable or encounters issues, users can fall back to using the <code>credentialStatus.statusIssuer</code> object to process the revocation status. This object must have<code>SparseMerkleTreeProof</code> type, so it will be processed accordingly. </li> </ol> <p>Example of implementation: JS,  GO</p>"},{"location":"w3c/status/overview/#iden3commrevocationstatusv10","title":"Iden3commRevocationStatusV1.0","text":"<p>Example of \u0421redential status:</p> <pre><code>\"credentialStatus\": {\n    \"id\": \"&lt;issuer-agent-url&gt;/api/v1/agent\",\n  \"revocationNonce\": 2234893355,\n  \"type\": \"Iden3commRevocationStatusV1.0\"\n},\n</code></pre> <p>In this case, the <code>id</code> is set to the issuer's agent endpoint. To establish communication with the issuer's agent, users should utilize the iden3comm protocol.</p>"},{"location":"w3c/status/overview/#workflow_2","title":"Workflow","text":"<p>To verify the revocation status of a credential, follow these steps using the appropriate communication protocols:</p> <ol> <li>Construct the revocation status request iden3comm message. This message will be used to request information about the revocation status.</li> <li>Send the constructed revocation status request message in plain text format to the issuer's agent endpoint, which is specified in the <code>id</code> field. The communication will take place using the iden3comm protocol.</li> <li>The issuer will respond with a status iden3comm protocol message that contains the necessary information.</li> <li> <p>Upon receiving the response, extract the <code>body</code> field from it. The <code>body</code> field will contain essential details related to the issuer and the revocation status:</p> <pre><code>{\n    \"issuer\": {\n        \"state\": \"52e66f413231e4d7c43cc09aaf076b8bc0f3a4f18f95e29dc92ab001e401e708\",\n        \"claimsTreeRoot\": \"c5a516e17a16160fdf567c130d73909fefbd5fcec1ad74b9707fbac989d4e812\"\n    },\n    \"mtp\": {\n        \"existence\": false,\n        \"siblings\": []\n    }\n}\n</code></pre> </li> <li> <p>Utilize the information obtained from the <code>body</code> field of the issuer's response to construct the non-revocation/revocation proof as required.</p> </li> </ol> <p>It's important to note that the difference between revocation statuses <code>SparseMerkleTreeProof</code> and <code>Iden3commRevocationStatusV1.0</code> lies in the format of the response/request. While <code>SparseMerkleTreeProof</code> uses the non-protocol request-response format, <code>Iden3commRevocationStatusV1.0</code> relays the iden3comm protocol for communication.</p>"},{"location":"w3c/status/overview/#iden3onchainsparsemerkletreeproof2023","title":"Iden3OnchainSparseMerkleTreeProof2023","text":"<p>The <code>Iden3OnchainSparseMerkleTreeProof2023</code> type is specifically used for revocation trees which are stored on the blockchain.</p> <p>Here are two examples of the credential status (CS) objects using this type:</p> <p>Example:</p> <pre><code>{\n    \"id\": \"did:polygonid:polygon:mumbai:2qCU58EJgrELbXjWbWGC9kPPnczQdp93nUR6LC45F6/credentialStatus?revocationNonce=1051565438&amp;contractAddress=80001:0x2fCE183c7Fbc4EbB5DB3B0F5a63e0e02AE9a85d2&amp;state=a1abdb9f44c7b649eb4d21b59ef34bd38e054aa3e500987575a14fc92c49f42c\",\n    \"type\": \"Iden3OnchainSparseMerkleTreeProof2023\",\n    \"revocationNonce\": 1051565438\n}\n</code></pre> <p>In both examples, the <code>id</code> field is a valid Decentralized Identifier (DID) with one required <code>contractAddress</code> and two optional parameters: <code>revocationNonce</code> and <code>state</code>.</p> <p>Where:</p> <ul> <li><code>contractAddress</code> consists of two parts: the <code>chainID</code>, which specifies the blockchain where the contract exists, and the smart contract address used for generating non-revocation proof.</li> <li><code>revocationNonce</code> represents the credential nonce.</li> <li><code>state</code> refers to the most recently published issuer state or genesis.</li> </ul> <p>The format of the <code>id</code> field follows this structure:</p> <pre><code>[did]:[methodid]:[chain]:[network]:[id]/credentialStatus?(revocationNonce=value)&amp;[contractAddress=[chainID]:[contractAddress]]&amp;(state=issuerState)\n</code></pre>"},{"location":"w3c/status/overview/#workflow_3","title":"Workflow","text":"<p>To verify the revocation status of an onchain using the <code>Iden3OnchainSparseMerkleTreeProof2023</code> type, follow these steps:</p> <ol> <li>Parse the <code>id</code> as a valid DID and extract the on-chain issuer contract address from this <code>id</code>: a. If the <code>contractAddress</code> parameter is not empty, use this address to build the non-revocation proof. b. If the <code>contractAddress</code> is empty return an error. </li> <li>Extract <code>chainID</code> from <code>contractAddress</code> parameter. If <code>chainID</code> not exists - extract chain id from DID.</li> <li>Parse the <code>id</code> to obtain the <code>revocationNonce</code>: a. You can extract the <code>revocationNonce</code> from the <code>id</code> parameter <code>revocationNonce</code>. b. If the <code>id</code> doesn't have the <code>revocationNonce</code>, you can get the <code>revocationNonce</code> from the <code>revocationNonce</code> field. c. If the parameter doesn't exist and the <code>revocationNonce</code> field is empty, consider this VC document invalid.</li> <li> <p>Get latest state for <code>id</code></p> <ol> <li> <p>If you encounter the error Identity does not exist, please check whether the <code>state</code> parameter from <code>id</code> corresponds to the genesis state. </p> <p>If the state parameter does not exist or is not the genesis state, return an error.</p> </li> </ol> </li> <li> <p>Generate revocation proof call method <code>getRevocationStatusByIdAndState</code>. <code>id</code> - id extracted from issuer DID. <code>state</code> - latest state or genesis from step 4. <code>nonce</code> - nonce from step 3.</p> <pre><code>const response = await this.onchainContract.getRevocationStatusByIdAndState(id, state, nonce);\n</code></pre> <ul> <li> <p>Use this ABI to make getRevocationStatusByIdAndState call</p> <pre><code>[\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"state\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint64\",\n        \"name\": \"nonce\",\n        \"type\": \"uint64\"\n      }\n    ],\n    \"name\": \"getRevocationStatusByIdAndState\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\n            \"components\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"state\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"claimsTreeRoot\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"revocationTreeRoot\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"rootOfRoots\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"internalType\": \"struct IOnchainCredentialStatusResolver.IdentityStateRoots\",\n            \"name\": \"issuer\",\n            \"type\": \"tuple\"\n          },\n          {\n            \"components\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"root\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"bool\",\n                \"name\": \"existence\",\n                \"type\": \"bool\"\n              },\n              {\n                \"internalType\": \"uint256[]\",\n                \"name\": \"siblings\",\n                \"type\": \"uint256[]\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"index\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"value\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"bool\",\n                \"name\": \"auxExistence\",\n                \"type\": \"bool\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"auxIndex\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"auxValue\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"internalType\": \"struct IOnchainCredentialStatusResolver.Proof\",\n            \"name\": \"mtp\",\n            \"type\": \"tuple\"\n          }\n        ],\n        \"internalType\": \"struct IOnchainCredentialStatusResolver.CredentialStatus\",\n        \"name\": \"\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n</code></pre> </li> </ul> <p>Also, you can use the signature of getRevocationStatusByIdAndState <code>0xaad72921</code> instead of ABI.</p> <p>Example of implementation: JS, GO</p> </li> </ol>"}]}